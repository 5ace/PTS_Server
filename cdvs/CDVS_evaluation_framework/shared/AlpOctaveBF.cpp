/*
 * This software module was originally developed by:
 *
 *   Peking University
 *
 * in the course of development of ISO/IEC 15938-13 Compact Descriptors for Visual
 * Search standard for reference purposes and its performance may not have been
 * optimized. This software module includes implementation of one or more tools as
 * specified by the ISO/IEC 15938-13 standard.
 *
 * ISO/IEC gives you a royalty-free, worldwide, non-exclusive, copyright license to copy,
 * distribute, and make derivative works of this software module or modifications thereof
 * for use in implementations of the ISO/IEC 15938-13 standard in products that satisfy
 * conformance criteria (if any).
 *
 * Those intending to use this software module in products are advised that its use may
 * infringe existing patents. ISO/IEC have no liability for use of this software module
 * or modifications thereof.
 *
 * Copyright is not released for products that do not conform to audiovisual and image-
 * coding related ITU Recommendations and/or ISO/IEC International Standards.
 *
 * Peking University retain full rights to modify and use the code for their own
 * purposes, assign or donate the code to a third party and to inhibit third parties
 * from using the code for products that do not conform to MPEG-related
 * ITU Recommendations and/or ISO/IEC International Standards.
 *
 * This copyright notice must be included in all copies or derivative works.
 * Copyright (c) ISO/IEC 2014.
 *
 */
#include "AlpOctaveBF.h"
#include "ImageBuffer.h"
#include <cstddef>
#include <cstring>   // std::memcpy, std::memcmp, std::memset, std::memchr
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <iostream>
#include <iomanip>
#include <algorithm>
#include "CdvsException.h"
#include "vl/sift.h"		// vl_feat library

using namespace std;
using namespace mpeg7cdvs;

const double AlpOctaveBF::magnification = 2.64;	// magnification factor
const double AlpOctaveBF::sigma0 = 1.6;			// sigma of the first gaussian filtered image (G1)
const double AlpOctaveBF::sigman = 0.5;			// sigma of the original image
const double AlpOctaveBF::sigmak = pow(2.0, (1.0 / nlevels));
const double AlpOctaveBF::dsigma0 = sigma0 * sigmak * sqrt (1.0 - 1.0 / (sigmak*sigmak)) ;

const Filter AlpOctaveBF::o1g1_filter(sqrt(sigma0*sigma0 - sigman*sigman));	// static filter initialization
const Filter AlpOctaveBF::g2_filter(dsigma0);									// static filter initialization
const Filter AlpOctaveBF::g3_filter(dsigma0*sigmak);							// static filter initialization
const Filter AlpOctaveBF::g4_filter(dsigma0*sigmak*sigmak);					// static filter initialization

const float AlpOctaveBF::sigmas[] = {
		sigma0, sigma0 * sigmak, sigma0*sigmak*sigmak, sigma0*sigmak*sigmak*sigmak 	// same as vl_feat with levels = 2
};

const float AlpOctaveBF::inter_sigmas[] = {
		1.90273138f, 2.69086853f, 3.80546277f
};

const float AlpOctaveBF::peakThreshold = 0.4f;
const float AlpOctaveBF::lowSigma = 1.7f;
const float AlpOctaveBF::highSigma = 4.0f;
const float AlpOctaveBF::sigmaThreshold = 0.4f;
const float AlpOctaveBF::curvRatioThreshold = 12.0f;
const float AlpOctaveBF::sigmaMerge = 0.4f;
const float AlpOctaveBF::radiusMerge = 2.0f;
const float AlpOctaveBF::maxDisplacement = 1.0f;

const float AlpOctaveBF::qcoeff[4][54] =	{
	//	Values of the qcoeff matrix when sigma = 1.600000
	{
	0.098214f,    0.310104f,    0.098214f,    -0.195494f,    -0.620398f,    -0.195494f,    0.098214f,    0.310104f,    0.098214f,
	0.098214f,    -0.195494f,    0.098214f,    0.310104f,    -0.620398f,    0.310104f,    0.098214f,    -0.195494f,    0.098214f,
	0.278622f,    -0.000000f,    -0.278622f,    -0.000000f,    0.000000f,    -0.000000f,    -0.278622f,    -0.000000f,    0.278622f,
	-0.113412f,    -0.311714f,    -0.113412f,    -0.000000f,    -0.000000f,    -0.000000f,    0.113412f,    0.311714f,    0.113412f,
	-0.113412f,    0.000000f,    0.113412f,    -0.311714f,    -0.000000f,    0.311714f,    -0.113412f,    0.000000f,    0.113412f,
	-0.027805f,    0.068460f,    -0.027805f,    0.068460f,    0.844390f,    0.068460f,    -0.027805f,    0.068460f,    -0.027805f,
	},

	//	Values of the qcoeff matrix when sigma = 2.262742
	{
	0.095647f,    0.311924f,    0.095647f,    -0.190786f,    -0.624384f,    -0.190786f,    0.095647f,    0.311924f,    0.095647f,
	0.095647f,    -0.190786f,    0.095647f,    0.311924f,    -0.624384f,    0.311924f,    0.095647f,    -0.190786f,    0.095647f,
	0.264138f,    -0.000000f,    -0.264138f,    0.000000f,    0.000000f,    0.000000f,    -0.264138f,    0.000000f,    0.264138f,
	-0.107186f,    -0.304575f,    -0.107186f,    -0.000000f,    0.000000f,    -0.000000f,    0.107186f,    0.304575f,    0.107186f,
	-0.107186f,    0.000000f,    0.107186f,    -0.304575f,    -0.000000f,    0.304575f,    -0.107186f,    0.000000f,    0.107186f,
	-0.028542f,    0.063217f,    -0.028542f,    0.063217f,    0.863039f,    0.063217f,    -0.028542f,    0.063217f,    -0.028542f,
	},

	//	Values of the qcoeff matrix when sigma = 3.200000
	{
	0.094511f,    0.312611f,    0.094511f,    -0.188729f,    -0.625674f,    -0.188729f,    0.094511f,    0.312611f,    0.094511f,
	0.094511f,    -0.188729f,    0.094511f,    0.312611f,    -0.625674f,    0.312611f,    0.094511f,    -0.188729f,    0.094511f,
	0.257040f,    0.000000f,    -0.257040f,    0.000000f,    -0.000000f,    0.000000f,    -0.257040f,    0.000000f,    0.257040f,
	-0.104562f,    -0.300359f,    -0.104562f,    -0.000000f,    0.000000f,    -0.000000f,    0.104562f,    0.300359f,    0.104562f,
	-0.104562f,    -0.000000f,    0.104562f,    -0.300359f,    0.000000f,    0.300359f,    -0.104562f,    -0.000000f,    0.104562f,
	-0.028356f,    0.059829f,    -0.028356f,    0.059829f,    0.874571f,    0.059829f,    -0.028356f,    0.059829f,    -0.028356f,
	},

	//	Values of the qcoeff matrix when sigma = 4.525483
	{
	0.093707f,    0.313394f,    0.093707f,    -0.187276f,    -0.627030f,    -0.187276f,    0.093707f,    0.313394f,    0.093707f,
	0.093707f,    -0.187276f,    0.093707f,    0.313394f,    -0.627030f,    0.313394f,    0.093707f,    -0.187276f,    0.093707f,
	0.253510f,    0.000000f,    -0.253510f,    0.000000f,    -0.000000f,    0.000000f,    -0.253510f,    0.000000f,    0.253510f,
	-0.102943f,    -0.298825f,    -0.102943f,    -0.000000f,    0.000000f,    -0.000000f,    0.102943f,    0.298825f,    0.102943f,
	-0.102943f,    -0.000000f,    0.102943f,    -0.298825f,    0.000000f,    0.298825f,    -0.102943f,    -0.000000f,    0.102943f,
	-0.029147f,    0.059807f,    -0.029147f,    0.059807f,    0.877473f,    0.059807f,    -0.029147f,    0.059807f,    -0.029147f,
	},
};

#define NBO 8
#define NBP 4

#define log2(x) (log(x)/LOG_OF_2)

FrequencyFilter::FrequencyFilter()
{
	Init();
}

FrequencyFilter::~FrequencyFilter()
{
	Release();
}

const unsigned char FrequencyFilter::bits[8] = {1, 2, 4, 8, 16, 32, 64, 128};

const int FrequencyFilter::g_flog_maskpos0[2] = {
	0, 269
};

const unsigned char FrequencyFilter::g_flog_mask0[538] = {

	254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
	255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
	255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
	255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
	255,255,255,255,255,255,255,255,63,255,63,254,31,254,7,255,192,15,120,128,1,0,0,0,0,0,0,0,0,254,255,255,7,0,0,0,0,254,255,255,7,0,0,0,0,254,255,255,3,0,0,0,0,255,255,255,0,0,0,0,
	192,255,255,31,0,0,0,0,248,255,255,1,0,0,0,128,255,255,7,0,0,0,0,252,255,31,0,0,0,0,240,255,63,0,0,0,0,224,255,63,0,0,0,0,224,255,15,0,0,0,0,240,255,3,0,0,0,0,252,63,
	0,0,0,0,128,255,3,0,0,0,0,248,15,0,0,0,0,192,63,0,0,0,0,0,63,0,0,0,0,0,30,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};

const int FrequencyFilter::g_flog_pos0[2] = {
	0, 2045
};

const filter_type FrequencyFilter::g_flog_data0[2346] = {

	-0.006150f,-0.024381f,-0.054045f,-0.094095f,-0.143127f,-0.199448f,-0.261141f,-0.326150f,-0.392363f,-0.457694f,-0.520163f,-0.577964f,-0.629527f,-0.673562f,-0.709091f,-0.735463f,-0.752355f,-0.759760f,-0.757960f,-0.747493f,-0.729111f,-0.703731f,-0.672389f,-0.636192f,-0.596268f,-0.553729f,-0.509637f,-0.464969f,-0.420599f,-0.377283f,-0.335652f,-0.296205f,-0.259318f,-0.225247f,-0.194140f,-0.166051f,-0.140953f,-0.118755f,-0.099312f,-0.082442f,
	-0.067939f,-0.055582f,-0.045146f,-0.036407f,-0.029151f,-0.023176f,-0.018296f,-0.014343f,-0.011166f,-0.008633f,-0.006630f,-0.005057f,-0.003833f,-0.002886f,-0.002159f,-0.001606f,-0.001189f,-0.000876f,-0.000645f,-0.000478f,-0.000360f,-0.000283f,-0.000239f,-0.000224f,-0.012266f,-0.030396f,-0.059893f,-0.099716f,-0.148466f,-0.204457f,-0.265781f,-0.330390f,-0.396182f,-0.461078f,-0.523109f,-0.580477f,-0.631620f,-0.675254f,-0.710408f,-0.736435f,
	-0.753016f,-0.760145f,-0.758105f,-0.747436f,-0.728887f,-0.703374f,-0.671932f,-0.635662f,-0.595691f,-0.553128f,-0.509029f,-0.464370f,-0.420022f,-0.376737f,-0.335143f,-0.295738f,-0.258894f,-0.224867f,-0.193803f,-0.165756f,-0.140698f,-0.118535f,-0.099125f,-0.082284f,-0.067807f,-0.055473f,-0.045056f,-0.036334f,-0.029092f,-0.023128f,-0.018258f,-0.014313f,-0.011143f,-0.008615f,-0.006616f,-0.005047f,-0.003824f,-0.002880f,-0.002155f,-0.001603f,
	-0.001186f,-0.000874f,-0.000644f,-0.000477f,-0.000359f,-0.000282f,-0.000238f,-0.000224f,-0.048223f,-0.077225f,-0.116373f,-0.164285f,-0.219297f,-0.279523f,-0.342943f,-0.407480f,-0.471086f,-0.531815f,-0.587896f,-0.637791f,-0.680236f,-0.714276f,-0.739278f,-0.754934f,-0.761245f,-0.758497f,-0.747227f,-0.728185f,-0.702280f,-0.670539f,-0.634056f,-0.593949f,-0.551315f,-0.507201f,-0.462572f,-0.418290f,-0.375099f,-0.333617f,-0.294337f,-0.257625f,
	-0.223730f,-0.192797f,-0.164874f,-0.139933f,-0.117879f,-0.098566f,-0.081813f,-0.067413f,-0.055147f,-0.044788f,-0.036115f,-0.028915f,-0.022987f,-0.018146f,-0.014224f,-0.011073f,-0.008561f,-0.006574f,-0.005015f,-0.003800f,-0.002861f,-0.002141f,-0.001593f,-0.001178f,-0.000869f,-0.000640f,-0.000474f,-0.000357f,-0.000280f,-0.000237f,-0.000222f,-0.105417f,-0.143459f,-0.190000f,-0.243407f,-0.301837f,-0.363310f,-0.425795f,-0.487289f,-0.545889f,
	-0.599867f,-0.647722f,-0.688223f,-0.720445f,-0.743776f,-0.757925f,-0.762902f,-0.759000f,-0.746757f,-0.726915f,-0.700376f,-0.668156f,-0.631333f,-0.591010f,-0.548268f,-0.504137f,-0.459565f,-0.415398f,-0.372366f,-0.331075f,-0.292005f,-0.255513f,-0.221840f,-0.191124f,-0.163410f,-0.138664f,-0.116789f,-0.097639f,-0.081032f,-0.066761f,-0.054606f,-0.044344f,-0.035753f,-0.028623f,-0.022752f,-0.017959f,-0.014077f,-0.010958f,-0.008471f,-0.006505f,
	-0.004961f,-0.003760f,-0.002831f,-0.002118f,-0.001575f,-0.001166f,-0.000859f,-0.000633f,-0.000469f,-0.000353f,-0.000277f,-0.000234f,-0.000220f,-0.179994f,-0.224664f,-0.275886f,-0.331867f,-0.390689f,-0.450379f,-0.508997f,-0.564701f,-0.615818f,-0.660899f,-0.698761f,-0.728514f,-0.749580f,-0.761687f,-0.764862f,-0.759403f,-0.745849f,-0.724934f,-0.697549f,-0.664692f,-0.627424f,-0.586825f,-0.543952f,-0.499814f,-0.455335f,-0.411340f,-0.368539f,
	-0.327521f,-0.288749f,-0.252567f,-0.219207f,-0.188796f,-0.161372f,-0.136899f,-0.115274f,-0.096352f,-0.079947f,-0.065855f,-0.053856f,-0.043728f,-0.035251f,-0.028217f,-0.022427f,-0.017700f,-0.013873f,-0.010798f,-0.008347f,-0.006409f,-0.004888f,-0.003704f,-0.002788f,-0.002086f,-0.001552f,-0.001148f,-0.000846f,-0.000623f,-0.000461f,-0.000348f,-0.000273f,-0.000230f,-0.000217f,-0.267015f,-0.315525f,-0.368471f,-0.424005f,-0.480233f,-0.535289f,
	-0.587408f,-0.634987f,-0.676641f,-0.711243f,-0.737952f,-0.756227f,-0.765824f,-0.766788f,-0.759425f,-0.744271f,-0.722054f,-0.693649f,-0.660033f,-0.622242f,-0.581329f,-0.538324f,-0.494204f,-0.449866f,-0.406110f,-0.363619f,-0.322960f,-0.284578f,-0.248799f,-0.215842f,-0.185824f,-0.158775f,-0.134650f,-0.113346f,-0.094713f,-0.078568f,-0.064703f,-0.052902f,-0.042945f,-0.034614f,-0.027702f,-0.022015f,-0.017372f,-0.013614f,-0.010595f,-0.008189f,
	-0.006287f,-0.004795f,-0.003633f,-0.002735f,-0.002046f,-0.001522f,-0.001126f,-0.000830f,-0.000611f,-0.000453f,-0.000341f,-0.000268f,-0.000226f,-0.000212f,-0.360867f,-0.410267f,-0.461964f,-0.514152f,-0.565056f,-0.612997f,-0.656457f,-0.694125f,-0.724941f,-0.748120f,-0.763165f,-0.769863f,-0.768280f,-0.758731f,-0.741750f,-0.718055f,-0.688502f,-0.654044f,-0.615687f,-0.574451f,-0.531333f,-0.487276f,-0.443144f,-0.399703f,-0.357610f,-0.317403f,
	-0.279506f,-0.244226f,-0.211764f,-0.182226f,-0.155633f,-0.131933f,-0.111019f,-0.092738f,-0.076905f,-0.063316f,-0.051755f,-0.042003f,-0.033848f,-0.027083f,-0.021519f,-0.016978f,-0.013303f,-0.010351f,-0.008000f,-0.006141f,-0.004683f,-0.003548f,-0.002670f,-0.001998f,-0.001486f,-0.001099f,-0.000810f,-0.000597f,-0.000442f,-0.000333f,-0.000261f,-0.000221f,-0.000207f,-0.455701f,-0.503107f,-0.550781f,-0.597049f,-0.640330f,-0.679200f,-0.712434f,
	-0.739044f,-0.758309f,-0.769779f,-0.773280f,-0.768897f,-0.756955f,-0.737988f,-0.712698f,-0.681922f,-0.646583f,-0.607654f,-0.566119f,-0.522934f,-0.479006f,-0.435158f,-0.392122f,-0.350522f,-0.310866f,-0.273553f,-0.238868f,-0.206995f,-0.178026f,-0.151969f,-0.128769f,-0.108310f,-0.090440f,-0.074973f,-0.061705f,-0.050423f,-0.040911f,-0.032959f,-0.026366f,-0.020945f,-0.016522f,-0.012943f,-0.010070f,-0.007781f,-0.005972f,-0.004554f,-0.003449f,
	-0.002596f,-0.001942f,-0.001444f,-0.001068f,-0.000787f,-0.000580f,-0.000429f,-0.000324f,-0.000254f,-0.000214f,-0.000201f,-0.545875f,-0.588673f,-0.629937f,-0.668196f,-0.702126f,-0.730593f,-0.752693f,-0.767769f,-0.775425f,-0.775525f,-0.768179f,-0.753720f,-0.732677f,-0.705740f,-0.673720f,-0.637510f,-0.598044f,-0.556265f,-0.513087f,-0.469373f,-0.425905f,-0.383377f,-0.342373f,-0.303374f,-0.266747f,-0.232756f,-0.201565f,-0.173250f,-0.147810f,
	-0.125180f,-0.105243f,-0.087841f,-0.072789f,-0.059886f,-0.048920f,-0.039679f,-0.031958f,-0.025558f,-0.020298f,-0.016008f,-0.012538f,-0.009753f,-0.007535f,-0.005782f,-0.004408f,-0.003339f,-0.002513f,-0.001879f,-0.001397f,-0.001034f,-0.000762f,-0.000561f,-0.000415f,-0.000313f,-0.000246f,-0.000207f,-0.000195f,-0.626350f,-0.662366f,-0.695363f,-0.724126f,-0.747618f,-0.765020f,-0.775747f,-0.779457f,-0.776055f,-0.765672f,-0.748653f,-0.725522f,
	-0.696951f,-0.663723f,-0.626698f,-0.586769f,-0.544835f,-0.501764f,-0.458371f,-0.415395f,-0.373486f,-0.333193f,-0.294959f,-0.259123f,-0.225924f,-0.195507f,-0.167931f,-0.143185f,-0.121196f,-0.101840f,-0.084961f,-0.070372f,-0.057874f,-0.047259f,-0.038319f,-0.030853f,-0.024667f,-0.019585f,-0.015442f,-0.012092f,-0.009404f,-0.007264f,-0.005574f,-0.004248f,-0.003217f,-0.002421f,-0.001811f,-0.001346f,-0.000996f,-0.000734f,-0.000540f,-0.000400f,
	-0.000301f,-0.000236f,-0.000200f,-0.000188f,-0.693010f,-0.720632f,-0.744126f,-0.762557f,-0.775194f,-0.781524f,-0.781263f,-0.774355f,-0.760955f,-0.741416f,-0.716254f,-0.686124f,-0.651781f,-0.614044f,-0.573766f,-0.531796f,-0.488956f,-0.446010f,-0.403652f,-0.362485f,-0.323020f,-0.285664f,-0.250726f,-0.218418f,-0.188865f,-0.162111f,-0.138132f,-0.116848f,-0.098133f,-0.081826f,-0.067744f,-0.055689f,-0.045456f,-0.036844f,-0.029655f,-0.023702f,
	-0.018813f,-0.014830f,-0.011610f,-0.009027f,-0.006971f,-0.005348f,-0.004076f,-0.003086f,-0.002322f,-0.001736f,-0.001291f,-0.000955f,-0.000703f,-0.000518f,-0.000383f,-0.000289f,-0.000227f,-0.000191f,-0.000180f,-0.742884f,-0.761128f,-0.774531f,-0.782450f,-0.784446f,-0.780291f,-0.769969f,-0.753657f,-0.731713f,-0.704649f,-0.673096f,-0.637779f,-0.599477f,-0.558998f,-0.517141f,-0.474677f,-0.432321f,-0.390716f,-0.350423f,-0.311909f,-0.275545f,
	-0.241610f,-0.210289f,-0.181687f,-0.155833f,-0.132691f,-0.112174f,-0.094152f,-0.078464f,-0.064928f,-0.053349f,-0.043528f,-0.035267f,-0.028375f,-0.022672f,-0.017990f,-0.014177f,-0.011096f,-0.008625f,-0.006660f,-0.005108f,-0.003892f,-0.002946f,-0.002217f,-0.001657f,-0.001232f,-0.000911f,-0.000671f,-0.000494f,-0.000366f,-0.000276f,-0.000216f,-0.000183f,-0.000172f,-0.774253f,-0.782771f,-0.786126f,-0.783951f,-0.776075f,-0.762517f,-0.743477f,
	-0.719318f,-0.690540f,-0.657753f,-0.621649f,-0.582966f,-0.542463f,-0.500891f,-0.458967f,-0.417355f,-0.376650f,-0.337365f,-0.299926f,-0.264668f,-0.231838f,-0.201598f,-0.174030f,-0.149148f,-0.126907f,-0.107213f,-0.089933f,-0.074906f,-0.061951f,-0.050878f,-0.041494f,-0.033605f,-0.027028f,-0.021588f,-0.017124f,-0.013490f,-0.010556f,-0.008203f,-0.006332f,-0.004856f,-0.003699f,-0.002800f,-0.002106f,-0.001574f,-0.001170f,-0.000865f,-0.000637f,
	-0.000469f,-0.000347f,-0.000262f,-0.000205f,-0.000173f,-0.000163f,-0.786647f,-0.785687f,-0.779596f,-0.768253f,-0.751716f,-0.730201f,-0.704075f,-0.673827f,-0.640041f,-0.603375f,-0.564525f,-0.524202f,-0.483104f,-0.441896f,-0.401192f,-0.361535f,-0.323394f,-0.287153f,-0.253112f,-0.221487f,-0.192413f,-0.165955f,-0.142113f,-0.120831f,-0.102010f,-0.085514f,-0.071183f,-0.058840f,-0.048299f,-0.039372f,-0.031873f,-0.025624f,-0.020459f,-0.016224f,
	-0.012777f,-0.009994f,-0.007765f,-0.005993f,-0.004594f,-0.003499f,-0.002648f,-0.001992f,-0.001489f,-0.001106f,-0.000818f,-0.000603f,-0.000443f,-0.000328f,-0.000247f,-0.000194f,-0.000164f,-0.000154f,-0.780744f,-0.771067f,-0.756586f,-0.737389f,-0.713712f,-0.685918f,-0.654485f,-0.619971f,-0.582997f,-0.544216f,-0.504291f,-0.463869f,-0.423563f,-0.383932f,-0.345474f,-0.308611f,-0.273687f,-0.240967f,-0.210637f,-0.182810f,-0.157532f,-0.134788f,
	-0.114516f,-0.096610f,-0.080934f,-0.067330f,-0.055624f,-0.045636f,-0.037183f,-0.030087f,-0.024179f,-0.019298f,-0.015297f,-0.012044f,-0.009418f,-0.007315f,-0.005644f,-0.004326f,-0.003294f,-0.002493f,-0.001874f,-0.001401f,-0.001041f,-0.000769f,-0.000567f,-0.000417f,-0.000309f,-0.000233f,-0.000182f,-0.000154f,-0.000145f,-0.758197f,-0.740960f,-0.719475f,-0.693990f,-0.664866f,-0.632565f,-0.597619f,-0.560611f,-0.522151f,-0.482854f,-0.443314f,
	-0.404093f,-0.365702f,-0.328588f,-0.293130f,-0.259635f,-0.228333f,-0.199382f,-0.172873f,-0.148833f,-0.127239f,-0.108018f,-0.091063f,-0.076236f,-0.063383f,-0.052333f,-0.042913f,-0.034947f,-0.028266f,-0.022705f,-0.018115f,-0.014354f,-0.011297f,-0.008832f,-0.006858f,-0.005290f,-0.004054f,-0.003086f,-0.002335f,-0.001755f,-0.001312f,-0.000974f,-0.000720f,-0.000530f,-0.000390f,-0.000289f,-0.000218f,-0.000171f,-0.000144f,-0.000135f,-0.721393f,
	-0.698027f,-0.671119f,-0.641028f,-0.608196f,-0.573127f,-0.536369f,-0.498488f,-0.460048f,-0.421596f,-0.383642f,-0.346648f,-0.311016f,-0.277083f,-0.245117f,-0.215318f,-0.187818f,-0.162686f,-0.139936f,-0.119532f,-0.101396f,-0.085418f,-0.071462f,-0.059377f,-0.048997f,-0.040156f,-0.032686f,-0.026424f,-0.021217f,-0.016921f,-0.013403f,-0.010545f,-0.008241f,-0.006398f,-0.004934f,-0.003780f,-0.002877f,-0.002176f,-0.001636f,-0.001222f,-0.000908f,
	-0.000671f,-0.000494f,-0.000364f,-0.000269f,-0.000203f,-0.000159f,-0.000134f,-0.000126f,-0.673207f,-0.645278f,-0.614594f,-0.581576f,-0.546700f,-0.510476f,-0.473426f,-0.436069f,-0.398902f,-0.362386f,-0.326936f,-0.292911f,-0.260608f,-0.230261f,-0.202038f,-0.176048f,-0.152342f,-0.130919f,-0.111735f,-0.094708f,-0.079726f,-0.066655f,-0.055348f,-0.045646f,-0.037389f,-0.030418f,-0.024580f,-0.019728f,-0.015726f,-0.012453f,-0.009794f,-0.007652f,
	-0.005938f,-0.004578f,-0.003506f,-0.002668f,-0.002018f,-0.001516f,-0.001133f,-0.000841f,-0.000622f,-0.000458f,-0.000337f,-0.000249f,-0.000188f,-0.000147f,-0.000124f,-0.000117f,-0.616735f,-0.585831f,-0.552969f,-0.518595f,-0.483180f,-0.447204f,-0.411142f,-0.375443f,-0.340521f,-0.306748f,-0.274439f,-0.243856f,-0.215199f,-0.188610f,-0.164176f,-0.141931f,-0.121863f,-0.103919f,-0.088014f,-0.074037f,-0.061857f,-0.051331f,-0.042309f,-0.034637f,
	-0.028165f,-0.022748f,-0.018250f,-0.014542f,-0.011511f,-0.009050f,-0.007068f,-0.005484f,-0.004227f,-0.003237f,-0.002462f,-0.001862f,-0.001399f,-0.001045f,-0.000776f,-0.000573f,-0.000422f,-0.000311f,-0.000230f,-0.000173f,-0.000136f,-0.000115f,-0.000108f,-0.555070f,-0.522692f,-0.489111f,-0.454763f,-0.420088f,-0.385514f,-0.351446f,-0.318256f,-0.286271f,-0.255770f,-0.226979f,-0.200068f,-0.175156f,-0.152309f,-0.131546f,-0.112845f,-0.096149f,
	-0.081370f,-0.068399f,-0.057109f,-0.047361f,-0.039014f,-0.031922f,-0.025944f,-0.020945f,-0.016795f,-0.013378f,-0.010585f,-0.008320f,-0.006496f,-0.005038f,-0.003882f,-0.002972f,-0.002261f,-0.001709f,-0.001284f,-0.000959f,-0.000712f,-0.000526f,-0.000387f,-0.000285f,-0.000211f,-0.000159f,-0.000124f,-0.000105f,-0.000099f,-0.491102f,-0.458584f,-0.425538f,-0.392364f,-0.359447f,-0.327152f,-0.295807f,-0.265701f,-0.237078f,-0.210131f,-0.185004f,
	-0.161793f,-0.140548f,-0.121274f,-0.103943f,-0.088491f,-0.074833f,-0.062859f,-0.052448f,-0.043469f,-0.035787f,-0.029266f,-0.023774f,-0.019183f,-0.015376f,-0.012243f,-0.009683f,-0.007608f,-0.005938f,-0.004604f,-0.003547f,-0.002715f,-0.002065f,-0.001560f,-0.001172f,-0.000875f,-0.000650f,-0.000480f,-0.000353f,-0.000260f,-0.000192f,-0.000145f,-0.000114f,-0.000096f,-0.000090f,-0.427369f,-0.395829f,-0.364328f,-0.333211f,-0.302801f,-0.273390f,
	-0.245231f,-0.218533f,-0.193462f,-0.170138f,-0.148636f,-0.128991f,-0.111201f,-0.095227f,-0.081006f,-0.068452f,-0.057459f,-0.047911f,-0.039684f,-0.032652f,-0.026688f,-0.021669f,-0.017477f,-0.014003f,-0.011145f,-0.008812f,-0.006921f,-0.005400f,-0.004186f,-0.003224f,-0.002467f,-0.001875f,-0.001417f,-0.001064f,-0.000794f,-0.000590f,-0.000436f,-0.000321f,-0.000236f,-0.000174f,-0.000131f,-0.000103f,-0.000087f,-0.000082f,-0.365968f,-0.336279f,
	-0.307073f,-0.278634f,-0.251219f,-0.225047f,-0.200300f,-0.177115f,-0.155593f,-0.135791f,-0.117732f,-0.101403f,-0.086765f,-0.073750f,-0.062274f,-0.052237f,-0.043529f,-0.036033f,-0.029632f,-0.024207f,-0.019645f,-0.015837f,-0.012683f,-0.010091f,-0.007975f,-0.006262f,-0.004884f,-0.003785f,-0.002914f,-0.002229f,-0.001695f,-0.001280f,-0.000961f,-0.000717f,-0.000532f,-0.000393f,-0.000289f,-0.000213f,-0.000157f,-0.000119f,-0.000093f,-0.000078f,
	-0.000074f,-0.308509f,-0.281292f,-0.254879f,-0.229495f,-0.205328f,-0.182532f,-0.161225f,-0.141485f,-0.123357f,-0.106853f,-0.091953f,-0.078615f,-0.066771f,-0.056341f,-0.047229f,-0.039331f,-0.032539f,-0.026743f,-0.021836f,-0.017712f,-0.014273f,-0.011426f,-0.009087f,-0.007179f,-0.005635f,-0.004394f,-0.003404f,-0.002620f,-0.002004f,-0.001523f,-0.001150f,-0.000863f,-0.000644f,-0.000478f,-0.000353f,-0.000260f,-0.000191f,-0.000141f,-0.000106f,
	-0.000083f,-0.000070f,-0.000066f,-0.256111f,-0.231750f,-0.208403f,-0.186233f,-0.165369f,-0.145909f,-0.127915f,-0.111420f,-0.096427f,-0.082911f,-0.070828f,-0.060114f,-0.050688f,-0.042462f,-0.035340f,-0.029220f,-0.024003f,-0.019589f,-0.015882f,-0.012792f,-0.010236f,-0.008138f,-0.006427f,-0.005043f,-0.003931f,-0.003045f,-0.002343f,-0.001791f,-0.001361f,-0.001028f,-0.000771f,-0.000576f,-0.000427f,-0.000315f,-0.000232f,-0.000171f,-0.000126f,
	-0.000095f,-0.000075f,-0.000063f,-0.000059f,-0.209439f,-0.188111f,-0.167906f,-0.148934f,-0.131273f,-0.114973f,-0.100055f,-0.086517f,-0.074330f,-0.063449f,-0.053812f,-0.045344f,-0.037961f,-0.031575f,-0.026093f,-0.021423f,-0.017474f,-0.014161f,-0.011401f,-0.009120f,-0.007247f,-0.005722f,-0.004488f,-0.003497f,-0.002708f,-0.002083f,-0.001593f,-0.001210f,-0.000913f,-0.000685f,-0.000511f,-0.000379f,-0.000280f,-0.000206f,-0.000151f,-0.000112f,
	-0.000084f,-0.000066f,-0.000056f,-0.000052f,-0.168761f,-0.150470f,-0.133329f,-0.117403f,-0.102730f,-0.089322f,-0.077172f,-0.066250f,-0.056510f,-0.047894f,-0.040331f,-0.033743f,-0.028050f,-0.023168f,-0.019011f,-0.015500f,-0.012555f,-0.010104f,-0.008079f,-0.006418f,-0.005065f,-0.003972f,-0.003094f,-0.002395f,-0.001842f,-0.001408f,-0.001069f,-0.000807f,-0.000606f,-0.000452f,-0.000335f,-0.000247f,-0.000182f,-0.000134f,-0.000099f,-0.000074f,
	-0.000058f,-0.000049f,-0.000046f,-0.134022f,-0.118637f,-0.104368f,-0.091243f,-0.079268f,-0.068431f,-0.058702f,-0.050036f,-0.042379f,-0.035664f,-0.029821f,-0.024776f,-0.020452f,-0.016775f,-0.013670f,-0.011068f,-0.008904f,-0.007117f,-0.005651f,-0.004459f,-0.003495f,-0.002722f,-0.002107f,-0.001620f,-0.001238f,-0.000940f,-0.000709f,-0.000532f,-0.000397f,-0.000294f,-0.000217f,-0.000160f,-0.000117f,-0.000087f,-0.000065f,-0.000051f,-0.000043f,
	-0.000041f,-0.104920f,-0.092219f,-0.080553f,-0.069925f,-0.060319f,-0.051706f,-0.044043f,-0.037279f,-0.031353f,-0.026201f,-0.021757f,-0.017951f,-0.014716f,-0.011987f,-0.009702f,-0.007801f,-0.006233f,-0.004948f,-0.003903f,-0.003058f,-0.002381f,-0.001842f,-0.001416f,-0.001082f,-0.000821f,-0.000620f,-0.000465f,-0.000347f,-0.000257f,-0.000190f,-0.000140f,-0.000103f,-0.000076f,-0.000057f,-0.000045f,-0.000038f,-0.000036f,-0.080986f,-0.070684f,
	-0.061311f,-0.052850f,-0.045272f,-0.038537f,-0.032598f,-0.027400f,-0.022886f,-0.018994f,-0.015664f,-0.012835f,-0.010450f,-0.008454f,-0.006796f,-0.005428f,-0.004307f,-0.003396f,-0.002661f,-0.002071f,-0.001602f,-0.001231f,-0.000940f,-0.000714f,-0.000538f,-0.000404f,-0.000301f,-0.000223f,-0.000165f,-0.000121f,-0.000089f,-0.000066f,-0.000050f,-0.000039f,-0.000033f,-0.000031f,-0.061645f,-0.053431f,-0.046026f,-0.039400f,-0.033518f,-0.028336f,
	-0.023804f,-0.019871f,-0.016484f,-0.013587f,-0.011129f,-0.009057f,-0.007324f,-0.005885f,-0.004699f,-0.003728f,-0.002938f,-0.002301f,-0.001791f,-0.001385f,-0.001064f,-0.000813f,-0.000617f,-0.000465f,-0.000349f,-0.000260f,-0.000193f,-0.000142f,-0.000105f,-0.000077f,-0.000057f,-0.000043f,-0.000034f,-0.000028f,-0.000027f,-0.046280f,-0.039839f,-0.034082f,-0.028977f,-0.024483f,-0.020556f,-0.017151f,-0.014221f,-0.011716f,-0.009592f,-0.007804f,
	-0.006308f,-0.005067f,-0.004044f,-0.003207f,-0.002527f,-0.001979f,-0.001540f,-0.001190f,-0.000914f,-0.000698f,-0.000530f,-0.000399f,-0.000299f,-0.000223f,-0.000165f,-0.000122f,-0.000090f,-0.000066f,-0.000049f,-0.000037f,-0.000029f,-0.000024f,-0.000023f,-0.034273f,-0.029303f,-0.024899f,-0.021026f,-0.017645f,-0.014715f,-0.012195f,-0.010043f,-0.008219f,-0.006684f,-0.005401f,-0.004337f,-0.003460f,-0.002743f,-0.002161f,-0.001692f,-0.001316f,
	-0.001017f,-0.000781f,-0.000596f,-0.000452f,-0.000341f,-0.000256f,-0.000191f,-0.000141f,-0.000104f,-0.000077f,-0.000056f,-0.000042f,-0.000031f,-0.000025f,-0.000021f,-0.000019f,-0.025039f,-0.021265f,-0.017948f,-0.015054f,-0.012549f,-0.010395f,-0.008557f,-0.007000f,-0.005690f,-0.004597f,-0.003690f,-0.002943f,-0.002333f,-0.001837f,-0.001438f,-0.001118f,-0.000864f,-0.000663f,-0.000506f,-0.000384f,-0.000290f,-0.000217f,-0.000162f,-0.000120f,
	-0.000088f,-0.000065f,-0.000048f,-0.000035f,-0.000027f,-0.000021f,-0.000018f,-0.000017f,-0.018050f,-0.015226f,-0.012766f,-0.010636f,-0.008807f,-0.007247f,-0.005926f,-0.004816f,-0.003889f,-0.003121f,-0.002488f,-0.001972f,-0.001552f,-0.001215f,-0.000944f,-0.000730f,-0.000560f,-0.000427f,-0.000324f,-0.000244f,-0.000183f,-0.000136f,-0.000101f,-0.000075f,-0.000055f,-0.000040f,-0.000030f,-0.000022f,-0.000018f,-0.000015f,-0.000014f,-0.012839f,
	-0.010759f,-0.008961f,-0.007417f,-0.006101f,-0.004987f,-0.004051f,-0.003270f,-0.002623f,-0.002091f,-0.001657f,-0.001304f,-0.001020f,-0.000793f,-0.000612f,-0.000470f,-0.000359f,-0.000272f,-0.000205f,-0.000154f,-0.000114f,-0.000085f,-0.000063f,-0.000046f,-0.000034f,-0.000025f,-0.000019f,-0.000015f,-0.000012f,-0.000012f,-0.009012f,-0.007503f,-0.006208f,-0.005104f,-0.004171f,-0.003387f,-0.002733f,-0.002192f,-0.001747f,-0.001384f,-0.001089f,
	-0.000851f,-0.000662f,-0.000511f,-0.000392f,-0.000299f,-0.000227f,-0.000171f,-0.000128f,-0.000095f,-0.000071f,-0.000052f,-0.000038f,-0.000028f,-0.000021f,-0.000016f,-0.000012f,-0.000010f,-0.000010f,-0.006244f,-0.005164f,-0.004245f,-0.003467f,-0.002815f,-0.002271f,-0.001821f,-0.001451f,-0.001149f,-0.000904f,-0.000707f,-0.000549f,-0.000424f,-0.000325f,-0.000248f,-0.000188f,-0.000142f,-0.000106f,-0.000079f,-0.000059f,-0.000043f,-0.000032f,
	-0.000023f,-0.000017f,-0.000013f,-0.000010f,-0.000009f,-0.000008f,-0.004270f,-0.003508f,-0.002865f,-0.002325f,-0.001875f,-0.001503f,-0.001197f,-0.000948f,-0.000746f,-0.000583f,-0.000453f,-0.000349f,-0.000268f,-0.000204f,-0.000155f,-0.000117f,-0.000087f,-0.000065f,-0.000048f,-0.000036f,-0.000026f,-0.000019f,-0.000014f,-0.000011f,-0.000008f,-0.000007f,-0.000007f,-0.002882f,-0.002353f,-0.001909f,-0.001539f,-0.001233f,-0.000982f,-0.000777f,
	-0.000611f,-0.000478f,-0.000371f,-0.000286f,-0.000220f,-0.000168f,-0.000127f,-0.000096f,-0.000072f,-0.000053f,-0.000040f,-0.000029f,-0.000021f,-0.000016f,-0.000012f,-0.000009f,-0.000007f,-0.000006f,-0.000005f,-0.001920f,-0.001557f,-0.001256f,-0.001006f,-0.000801f,-0.000634f,-0.000498f,-0.000389f,-0.000302f,-0.000233f,-0.000179f,-0.000136f,-0.000103f,-0.000078f,-0.000058f,-0.000043f,-0.000032f,-0.000024f,-0.000017f,-0.000013f,-0.000009f,
	-0.000007f,-0.000006f,-0.000005f,-0.000004f,-0.001263f,-0.001018f,-0.000815f,-0.000649f,-0.000513f,-0.000404f,-0.000315f,-0.000245f,-0.000189f,-0.000145f,-0.000110f,-0.000084f,-0.000063f,-0.000047f,-0.000035f,-0.000026f,-0.000019f,-0.000014f,-0.000010f,-0.000008f,-0.000006f,-0.000005f,-0.000004f,-0.000004f,-0.000820f,-0.000657f,-0.000523f,-0.000413f,-0.000325f,-0.000254f,-0.000197f,-0.000152f,-0.000117f,-0.000089f,-0.000067f,-0.000051f,
	-0.000038f,-0.000028f,-0.000021f,-0.000015f,-0.000011f,-0.000008f,-0.000006f,-0.000005f,-0.000004f,-0.000003f,-0.000003f,-0.000526f,-0.000418f,-0.000331f,-0.000260f,-0.000203f,-0.000158f,-0.000122f,-0.000093f,-0.000071f,-0.000054f,-0.000041f,-0.000030f,-0.000023f,-0.000017f,-0.000012f,-0.000009f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000333f,-0.000263f,-0.000207f,-0.000161f,-0.000125f,-0.000097f,-0.000074f,
	-0.000056f,-0.000043f,-0.000032f,-0.000024f,-0.000018f,-0.000013f,-0.000010f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000002f,-0.000208f,-0.000163f,-0.000128f,-0.000099f,-0.000076f,-0.000059f,-0.000045f,-0.000034f,-0.000025f,-0.000019f,-0.000014f,-0.000010f,-0.000008f,-0.000006f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000002f,-0.000001f,-0.000128f,-0.000100f,-0.000078f,-0.000060f,-0.000046f,-0.000035f,
	-0.000027f,-0.000020f,-0.000015f,-0.000011f,-0.000008f,-0.000006f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000001f,-0.000001f,-0.000001f,-0.000078f,-0.000061f,-0.000047f,-0.000036f,-0.000027f,-0.000021f,-0.000016f,-0.000012f,-0.000009f,-0.000006f,-0.000005f,-0.000003f,-0.000003f,-0.000002f,-0.000001f,-0.000001f,-0.000047f,-0.000036f,-0.000028f,-0.000021f,-0.000016f,-0.000012f,-0.000009f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,
	-0.000002f,-0.000001f,-0.000001f,-0.000028f,-0.000021f,-0.000016f,-0.000012f,-0.000009f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000001f,-0.000016f,-0.000013f,-0.000009f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000001f,-0.000010f,-0.000007f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000001f,-0.000005f,-0.000004f,-0.000003f,-0.000002f,-0.000002f,-0.000001f,-0.000003f,
	-0.000002f,-0.000002f,-0.000001f,-0.000002f,-0.000001f,-0.048150f,-0.178916f,-0.356025f,-0.532916f,-0.667468f,-0.733489f,-0.725330f,-0.655270f,-0.546114f,-0.422689f,-0.305281f,-0.206462f,-0.131095f,-0.078310f,-0.044076f,-0.023404f,-0.011736f,-0.005564f,-0.002497f,-0.001062f,-0.000428f,-0.000164f,-0.000060f,-0.000020f,-0.000007f,-0.000002f,-0.093983f,-0.218288f,-0.386122f,-0.552691f,-0.677582f,-0.735856f,-0.722456f,-0.649616f,-0.539654f,
	-0.416722f,-0.300454f,-0.202932f,-0.128722f,-0.076830f,-0.043215f,-0.022934f,-0.011496f,-0.005448f,-0.002444f,-0.001039f,-0.000419f,-0.000161f,-0.000058f,-0.000020f,-0.000006f,-0.000002f,-0.324601f,-0.466642f,-0.604571f,-0.702766f,-0.739776f,-0.712168f,-0.632017f,-0.520242f,-0.399070f,-0.286302f,-0.192639f,-0.121830f,-0.072544f,-0.040726f,-0.021579f,-0.010802f,-0.005114f,-0.002292f,-0.000973f,-0.000393f,-0.000150f,-0.000055f,-0.000019f,
	-0.000006f,-0.000002f,-0.571824f,-0.669039f,-0.729612f,-0.737103f,-0.690342f,-0.601051f,-0.488008f,-0.370563f,-0.263812f,-0.176451f,-0.111069f,-0.065887f,-0.036875f,-0.019489f,-0.009736f,-0.004601f,-0.002059f,-0.000873f,-0.000352f,-0.000135f,-0.000049f,-0.000017f,-0.000005f,-0.000002f,-0.721694f,-0.741730f,-0.718285f,-0.652573f,-0.555695f,-0.443789f,-0.332785f,-0.234629f,-0.155738f,-0.097434f,-0.057513f,-0.032058f,-0.016887f,-0.008412f,
	-0.003965f,-0.001771f,-0.000750f,-0.000302f,-0.000115f,-0.000042f,-0.000014f,-0.000005f,-0.000001f,-0.725876f,-0.676420f,-0.596599f,-0.496583f,-0.389642f,-0.288172f,-0.200964f,-0.132227f,-0.082139f,-0.048203f,-0.026739f,-0.014028f,-0.006964f,-0.003273f,-0.001458f,-0.000616f,-0.000247f,-0.000094f,-0.000034f,-0.000012f,-0.000004f,-0.000001f,-0.610079f,-0.523845f,-0.426663f,-0.328974f,-0.239889f,-0.165384f,-0.107800f,-0.066448f,-0.038745f,
	-0.021377f,-0.011164f,-0.005521f,-0.002586f,-0.001149f,-0.000484f,-0.000194f,-0.000074f,-0.000027f,-0.000009f,-0.000003f,-0.439454f,-0.350942f,-0.266162f,-0.191437f,-0.130477f,-0.084238f,-0.051510f,-0.029832f,-0.016365f,-0.008505f,-0.004188f,-0.001955f,-0.000866f,-0.000364f,-0.000145f,-0.000055f,-0.000020f,-0.000007f,-0.000002f,-0.275429f,-0.205770f,-0.146102f,-0.098487f,-0.062989f,-0.038209f,-0.021977f,-0.011985f,-0.006197f,-0.003038f,
	-0.001413f,-0.000623f,-0.000261f,-0.000104f,-0.000039f,-0.000014f,-0.000005f,-0.000002f,-0.151676f,-0.106426f,-0.071003f,-0.045005f,-0.027087f,-0.015474f,-0.008389f,-0.004315f,-0.002106f,-0.000976f,-0.000429f,-0.000179f,-0.000071f,-0.000027f,-0.000010f,-0.000003f,-0.000001f,-0.073882f,-0.048823f,-0.030686f,-0.018332f,-0.010404f,-0.005608f,-0.002870f,-0.001394f,-0.000643f,-0.000282f,-0.000117f,-0.000047f,-0.000018f,-0.000006f,-0.000002f,
	-0.031985f,-0.019946f,-0.011833f,-0.006674f,-0.003577f,-0.001822f,-0.000881f,-0.000405f,-0.000177f,-0.000073f,-0.000029f,-0.000011f,-0.000004f,-0.000001f,-0.012350f,-0.007279f,-0.004081f,-0.002176f,-0.001103f,-0.000531f,-0.000243f,-0.000106f,-0.000044f,-0.000017f,-0.000006f,-0.000002f,-0.004264f,-0.002378f,-0.001261f,-0.000636f,-0.000305f,-0.000139f,-0.000060f,-0.000025f,-0.000010f,-0.000004f,-0.000001f,-0.001319f,-0.000697f,-0.000350f,
	-0.000167f,-0.000076f,-0.000033f,-0.000014f,-0.000005f,-0.000002f,-0.000366f,-0.000183f,-0.000087f,-0.000039f,-0.000017f,-0.000007f,-0.000003f,-0.000001f,-0.000091f,-0.000043f,-0.000020f,-0.000008f,-0.000003f,-0.000001f,-0.000020f,-0.000009f,-0.000004f,-0.000002f,-0.000004f,-0.000002f
};

const int FrequencyFilter::g_fgaussian_maskpos0[2] = {
	0, 269
};

const unsigned char FrequencyFilter::g_fgaussian_mask0[538] = {

	255,255,255,255,255,255,1,0,254,255,255,255,255,255,1,0,254,255,255,255,255,255,0,0,255,255,255,255,255,63,0,192,255,255,255,255,255,7,0,248,255,255,255,255,127,0,128,255,255,255,255,255,3,0,252,255,255,255,255,15,
	0,240,255,255,255,255,15,0,224,255,255,255,255,15,0,224,255,255,255,255,7,0,240,255,255,255,255,1,0,252,255,255,255,63,0,128,255,255,255,255,1,0,248,255,255,255,15,0,192,255,255,255,63,0,0,255,255,255,63,0,
	0,254,255,255,63,0,0,254,255,255,31,0,0,255,255,255,3,0,192,255,255,127,0,0,248,255,255,3,0,128,255,255,31,0,0,252,255,63,0,0,240,255,127,0,0,224,255,63,0,0,224,255,15,0,0,240,255,3,0,0,
	252,63,0,0,128,255,1,0,0,248,15,0,0,192,31,0,0,0,31,0,0,0,14,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,254,255,255,255,3,0,0,0,254,255,255,255,1,0,0,0,255,255,255,127,0,0,0,
	192,255,255,255,15,0,0,0,248,255,255,255,0,0,0,128,255,255,255,7,0,0,0,252,255,255,31,0,0,0,240,255,255,31,0,0,0,224,255,255,31,0,0,0,224,255,255,15,0,0,0,240,255,255,3,0,0,0,252,255,
	63,0,0,0,128,255,255,3,0,0,0,248,255,15,0,0,0,192,255,63,0,0,0,0,255,63,0,0,0,0,254,63,0,0,0,0,254,15,0,0,0,0,255,3,0,0,0,192,63,0,0,0,0,248,1,0,0,0,128,7,
	0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

const int FrequencyFilter::g_fgaussian_pos0[2] = {
	0, 968
};

const filter_type FrequencyFilter::g_fgaussian_data0[1446] = {

	1.000000f,0.994150f,0.976805f,0.948566f,0.910397f,0.863571f,0.809597f,0.750142f,0.686944f,0.621732f,0.556145f,0.491674f,0.429605f,0.370992f,0.316639f,0.267096f,0.222677f,0.183479f,0.149418f,0.120260f,0.095663f,0.075210f,0.058439f,0.044879f,0.034063f,0.025552f,0.018944f,0.013881f,0.010052f,0.007195f,0.005089f,0.003558f,0.002459f,0.001679f,0.001133f,0.000756f,0.000498f,0.000325f,0.000209f,0.000133f,
	0.000084f,0.000052f,0.000032f,0.000019f,0.000012f,0.000007f,0.000004f,0.000002f,0.000001f,0.988334f,0.971090f,0.943017f,0.905071f,0.858519f,0.804861f,0.745754f,0.682926f,0.618095f,0.552892f,0.488797f,0.427092f,0.368822f,0.314787f,0.265534f,0.221374f,0.182406f,0.148544f,0.119557f,0.095104f,0.074770f,0.058097f,0.044616f,0.033863f,0.025402f,0.018833f,0.013799f,0.009993f,0.007153f,0.005060f,0.003537f,
	0.002444f,0.001669f,0.001127f,0.000752f,0.000496f,0.000323f,0.000208f,0.000132f,0.000083f,0.000052f,0.000032f,0.000019f,0.000012f,0.000007f,0.000004f,0.000002f,0.000001f,0.954147f,0.926563f,0.889280f,0.843540f,0.790818f,0.732742f,0.671010f,0.607311f,0.543245f,0.480269f,0.419640f,0.362387f,0.309295f,0.260901f,0.217512f,0.179223f,0.145952f,0.117471f,0.093444f,0.073465f,0.057084f,0.043838f,0.033273f,
	0.024959f,0.018504f,0.013559f,0.009819f,0.007028f,0.004971f,0.003476f,0.002402f,0.001640f,0.001107f,0.000738f,0.000487f,0.000317f,0.000204f,0.000130f,0.000082f,0.000051f,0.000031f,0.000019f,0.000011f,0.000007f,0.000004f,0.000002f,0.000001f,0.899777f,0.863571f,0.819154f,0.767956f,0.711559f,0.651612f,0.589753f,0.527540f,0.466385f,0.407508f,0.351911f,0.300353f,0.253358f,0.211224f,0.174042f,0.141733f,
	0.114075f,0.090743f,0.071341f,0.055434f,0.042570f,0.032311f,0.024238f,0.017969f,0.013167f,0.009535f,0.006825f,0.004828f,0.003375f,0.002332f,0.001593f,0.001075f,0.000717f,0.000473f,0.000308f,0.000198f,0.000126f,0.000079f,0.000049f,0.000030f,0.000018f,0.000011f,0.000007f,0.000004f,0.000002f,0.000001f,0.828823f,0.786192f,0.737055f,0.682927f,0.625392f,0.566023f,0.506313f,0.447618f,0.391111f,0.337750f,
	0.288267f,0.243164f,0.202724f,0.167039f,0.136029f,0.109485f,0.087092f,0.068471f,0.053203f,0.040857f,0.031011f,0.023262f,0.017246f,0.012637f,0.009151f,0.006550f,0.004633f,0.003239f,0.002238f,0.001529f,0.001032f,0.000688f,0.000454f,0.000296f,0.000190f,0.000121f,0.000076f,0.000047f,0.000029f,0.000018f,0.000011f,0.000006f,0.000004f,0.000002f,0.000001f,0.745755f,0.699144f,0.647801f,0.593225f,0.536910f,
	0.480271f,0.424595f,0.370994f,0.320378f,0.273440f,0.230657f,0.192297f,0.158447f,0.129033f,0.103853f,0.082612f,0.064949f,0.050467f,0.038756f,0.029416f,0.022066f,0.016359f,0.011987f,0.008681f,0.006213f,0.004395f,0.003073f,0.002123f,0.001450f,0.000979f,0.000653f,0.000430f,0.000280f,0.000181f,0.000115f,0.000072f,0.000045f,0.000028f,0.000017f,0.000010f,0.000006f,0.000003f,0.000002f,0.000001f,0.655447f,
	0.607313f,0.556148f,0.503352f,0.450253f,0.398057f,0.347807f,0.300354f,0.256350f,0.216240f,0.180279f,0.148544f,0.120968f,0.097362f,0.077449f,0.060890f,0.047312f,0.036334f,0.027577f,0.020687f,0.015337f,0.011238f,0.008138f,0.005825f,0.004120f,0.002881f,0.001990f,0.001359f,0.000917f,0.000612f,0.000404f,0.000263f,0.000169f,0.000108f,0.000068f,0.000042f,0.000026f,0.000016f,0.000009f,0.000006f,0.000003f,
	0.000002f,0.000001f,0.562713f,0.515306f,0.466387f,0.417188f,0.368825f,0.322264f,0.278297f,0.237524f,0.200360f,0.167039f,0.137635f,0.112085f,0.090212f,0.071761f,0.056418f,0.043838f,0.033665f,0.025552f,0.019167f,0.014210f,0.010412f,0.007541f,0.005397f,0.003818f,0.002669f,0.001844f,0.001259f,0.000850f,0.000567f,0.000374f,0.000244f,0.000157f,0.000100f,0.000063f,0.000039f,0.000024f,0.000015f,0.000009f,
	0.000005f,0.000003f,0.000002f,0.000001f,0.471892f,0.427095f,0.382041f,0.337752f,0.295114f,0.254851f,0.217513f,0.183480f,0.152967f,0.126040f,0.102642f,0.082612f,0.065715f,0.051665f,0.040145f,0.030829f,0.023399f,0.017553f,0.013013f,0.009535f,0.006905f,0.004942f,0.003496f,0.002444f,0.001689f,0.001153f,0.000778f,0.000519f,0.000342f,0.000223f,0.000144f,0.000091f,0.000058f,0.000036f,0.000022f,0.000013f,
	0.000008f,0.000005f,0.000003f,0.000002f,0.386550f,0.345773f,0.305689f,0.267099f,0.230658f,0.196865f,0.166062f,0.138445f,0.114075f,0.092898f,0.074770f,0.059477f,0.046760f,0.036334f,0.027903f,0.021178f,0.015886f,0.011778f,0.008630f,0.006250f,0.004473f,0.003164f,0.002212f,0.001529f,0.001044f,0.000705f,0.000470f,0.000310f,0.000202f,0.000130f,0.000083f,0.000052f,0.000032f,0.000020f,0.000012f,0.000007f,
	0.000004f,0.000003f,0.000001f,0.309297f,0.273442f,0.238923f,0.206326f,0.176097f,0.148544f,0.123841f,0.102041f,0.083098f,0.066882f,0.053203f,0.041827f,0.032501f,0.024959f,0.018944f,0.014210f,0.010535f,0.007720f,0.005590f,0.004001f,0.002830f,0.001979f,0.001367f,0.000934f,0.000630f,0.000420f,0.000277f,0.000181f,0.000116f,0.000074f,0.000047f,0.000029f,0.000018f,0.000011f,0.000006f,0.000004f,0.000002f,
	0.000001f,0.241743f,0.211225f,0.182407f,0.155683f,0.131324f,0.109484f,0.090212f,0.073465f,0.059129f,0.047035f,0.036979f,0.028733f,0.022066f,0.016748f,0.012563f,0.009314f,0.006825f,0.004942f,0.003537f,0.002502f,0.001749f,0.001209f,0.000826f,0.000557f,0.000372f,0.000245f,0.000160f,0.000103f,0.000065f,0.000041f,0.000026f,0.000016f,0.000010f,0.000006f,0.000003f,0.000002f,0.000001f,0.184560f,0.159380f,
	0.136030f,0.114746f,0.095663f,0.078823f,0.064191f,0.051664f,0.041097f,0.032310f,0.025106f,0.019280f,0.014633f,0.010977f,0.008138f,0.005963f,0.004318f,0.003091f,0.002186f,0.001529f,0.001056f,0.000721f,0.000487f,0.000325f,0.000214f,0.000140f,0.000090f,0.000057f,0.000036f,0.000022f,0.000014f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.137635f,0.117471f,0.099091f,0.082611f,0.068069f,0.055433f,
	0.044616f,0.035490f,0.027902f,0.021681f,0.016650f,0.012637f,0.009480f,0.007028f,0.005150f,0.003729f,0.002669f,0.001888f,0.001320f,0.000912f,0.000623f,0.000420f,0.000280f,0.000185f,0.000121f,0.000078f,0.000049f,0.000031f,0.000019f,0.000012f,0.000007f,0.000004f,0.000003f,0.000002f,0.100260f,0.084573f,0.070508f,0.058097f,0.047311f,0.038079f,0.030291f,0.023814f,0.018504f,0.014210f,0.010786f,0.008091f,
	0.005998f,0.004395f,0.003183f,0.002278f,0.001611f,0.001127f,0.000778f,0.000532f,0.000359f,0.000239f,0.000158f,0.000103f,0.000066f,0.000042f,0.000027f,0.000016f,0.000010f,0.000006f,0.000004f,0.000002f,0.000001f,0.071340f,0.059476f,0.049007f,0.039909f,0.032121f,0.025551f,0.020088f,0.015609f,0.011987f,0.009098f,0.006825f,0.005060f,0.003707f,0.002685f,0.001922f,0.001359f,0.000950f,0.000657f,0.000448f,
	0.000303f,0.000202f,0.000133f,0.000087f,0.000056f,0.000036f,0.000022f,0.000014f,0.000009f,0.000005f,0.000003f,0.000002f,0.000001f,0.049585f,0.040857f,0.033272f,0.026779f,0.021302f,0.016747f,0.013013f,0.009993f,0.007585f,0.005690f,0.004218f,0.003091f,0.002238f,0.001602f,0.001133f,0.000792f,0.000547f,0.000374f,0.000252f,0.000168f,0.000111f,0.000072f,0.000047f,0.000030f,0.000019f,0.000012f,0.000007f,
	0.000004f,0.000003f,0.000002f,0.033665f,0.027415f,0.022065f,0.017552f,0.013799f,0.010722f,0.008234f,0.006250f,0.004688f,0.003476f,0.002547f,0.001844f,0.001320f,0.000934f,0.000653f,0.000451f,0.000308f,0.000208f,0.000139f,0.000091f,0.000060f,0.000038f,0.000024f,0.000015f,0.000010f,0.000006f,0.000004f,0.000002f,0.000001f,0.022326f,0.017969f,0.014294f,0.011238f,0.008732f,0.006706f,0.005090f,0.003818f,
	0.002831f,0.002074f,0.001502f,0.001075f,0.000760f,0.000532f,0.000367f,0.000251f,0.000169f,0.000113f,0.000074f,0.000049f,0.000031f,0.000020f,0.000013f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.014463f,0.011504f,0.009045f,0.007028f,0.005397f,0.004096f,0.003073f,0.002278f,0.001669f,0.001209f,0.000865f,0.000612f,0.000428f,0.000296f,0.000202f,0.000136f,0.000091f,0.000060f,0.000039f,0.000025f,
	0.000016f,0.000010f,0.000006f,0.000004f,0.000002f,0.000001f,0.009151f,0.007195f,0.005591f,0.004293f,0.003259f,0.002444f,0.001812f,0.001328f,0.000962f,0.000688f,0.000487f,0.000340f,0.000235f,0.000161f,0.000108f,0.000072f,0.000048f,0.000031f,0.000020f,0.000013f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.005656f,0.004395f,0.003375f,0.002562f,0.001922f,0.001425f,0.001044f,0.000756f,0.000541f,
	0.000383f,0.000268f,0.000185f,0.000126f,0.000085f,0.000057f,0.000037f,0.000024f,0.000016f,0.000010f,0.000006f,0.000004f,0.000002f,0.000001f,0.003415f,0.002623f,0.001991f,0.001493f,0.001107f,0.000811f,0.000587f,0.000420f,0.000297f,0.000208f,0.000144f,0.000098f,0.000066f,0.000044f,0.000029f,0.000019f,0.000012f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.002014f,0.001529f,0.001147f,0.000850f,
	0.000623f,0.000451f,0.000323f,0.000228f,0.000160f,0.000110f,0.000075f,0.000051f,0.000034f,0.000022f,0.000015f,0.000009f,0.000006f,0.000004f,0.000002f,0.000001f,0.001160f,0.000870f,0.000645f,0.000473f,0.000342f,0.000245f,0.000173f,0.000121f,0.000084f,0.000057f,0.000039f,0.000026f,0.000017f,0.000011f,0.000007f,0.000005f,0.000003f,0.000002f,0.000001f,0.000653f,0.000484f,0.000355f,0.000257f,0.000184f,
	0.000130f,0.000091f,0.000063f,0.000043f,0.000029f,0.000019f,0.000013f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.000359f,0.000263f,0.000190f,0.000136f,0.000096f,0.000067f,0.000047f,0.000032f,0.000021f,0.000014f,0.000009f,0.000006f,0.000004f,0.000003f,0.000002f,0.000193f,0.000140f,0.000100f,0.000071f,0.000049f,0.000034f,0.000023f,0.000016f,0.000010f,0.000007f,0.000005f,0.000003f,0.000002f,
	0.000001f,0.000101f,0.000072f,0.000051f,0.000036f,0.000025f,0.000017f,0.000011f,0.000008f,0.000005f,0.000003f,0.000002f,0.000001f,0.000052f,0.000037f,0.000026f,0.000018f,0.000012f,0.000008f,0.000005f,0.000004f,0.000002f,0.000002f,0.000026f,0.000018f,0.000013f,0.000009f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.000013f,0.000009f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.000006f,
	0.000004f,0.000003f,0.000002f,0.000001f,0.000003f,0.000002f,0.000001f,0.000001f,1.000000f,0.988037f,0.952999f,0.897343f,0.824840f,0.740162f,0.648380f,0.554469f,0.462883f,0.377233f,0.300119f,0.233090f,0.176725f,0.130804f,0.094513f,0.066667f,0.045906f,0.030859f,0.020250f,0.012973f,0.008113f,0.004953f,0.002952f,0.001717f,0.000975f,0.000541f,0.000293f,0.000155f,0.000080f,0.000040f,0.000020f,0.000009f,
	0.000004f,0.000002f,0.976217f,0.941599f,0.886607f,0.814972f,0.731308f,0.640623f,0.547836f,0.457345f,0.372720f,0.296528f,0.230301f,0.174611f,0.129239f,0.093382f,0.065869f,0.045357f,0.030490f,0.020008f,0.012817f,0.008016f,0.004894f,0.002916f,0.001697f,0.000964f,0.000534f,0.000289f,0.000153f,0.000079f,0.000040f,0.000020f,0.000009f,0.000004f,0.000002f,0.908208f,0.855167f,0.786072f,0.705374f,0.617906f,
	0.528409f,0.441127f,0.359502f,0.286013f,0.222134f,0.168419f,0.124656f,0.090071f,0.063533f,0.043749f,0.029408f,0.019299f,0.012363f,0.007731f,0.004720f,0.002813f,0.001637f,0.000930f,0.000515f,0.000279f,0.000147f,0.000076f,0.000038f,0.000019f,0.000009f,0.000004f,0.000002f,0.805224f,0.740164f,0.664179f,0.581819f,0.497549f,0.415364f,0.338507f,0.269309f,0.209161f,0.158583f,0.117376f,0.084810f,0.059823f,
	0.041194f,0.027691f,0.018172f,0.011641f,0.007280f,0.004444f,0.002649f,0.001541f,0.000875f,0.000485f,0.000263f,0.000139f,0.000072f,0.000036f,0.000018f,0.000009f,0.000004f,0.000002f,0.680361f,0.610516f,0.534810f,0.457349f,0.381804f,0.311157f,0.247550f,0.192262f,0.145770f,0.107893f,0.077958f,0.054989f,0.037865f,0.025454f,0.016703f,0.010700f,0.006692f,0.004085f,0.002435f,0.001417f,0.000805f,0.000446f,
	0.000241f,0.000128f,0.000066f,0.000033f,0.000016f,0.000008f,0.000004f,0.000002f,0.547840f,0.479906f,0.410397f,0.342608f,0.279213f,0.222137f,0.172524f,0.130806f,0.096816f,0.069955f,0.049344f,0.033978f,0.022841f,0.014989f,0.009602f,0.006005f,0.003666f,0.002185f,0.001271f,0.000722f,0.000400f,0.000217f,0.000115f,0.000059f,0.000030f,0.000015f,0.000007f,0.000003f,0.000002f,0.420397f,0.359507f,0.300124f,
	0.244590f,0.194591f,0.151131f,0.114585f,0.084811f,0.061280f,0.043225f,0.029765f,0.020008f,0.013130f,0.008411f,0.005260f,0.003211f,0.001914f,0.001113f,0.000632f,0.000351f,0.000190f,0.000100f,0.000052f,0.000026f,0.000013f,0.000006f,0.000003f,0.000001f,0.307436f,0.256654f,0.209164f,0.166407f,0.129241f,0.097989f,0.072527f,0.052405f,0.036965f,0.025454f,0.017110f,0.011228f,0.007193f,0.004498f,0.002746f,
	0.001637f,0.000952f,0.000541f,0.000300f,0.000162f,0.000086f,0.000044f,0.000022f,0.000011f,0.000005f,0.000002f,0.000001f,0.214260f,0.174614f,0.138920f,0.107893f,0.081803f,0.060547f,0.043748f,0.030859f,0.021249f,0.014284f,0.009374f,0.006005f,0.003755f,0.002293f,0.001366f,0.000795f,0.000451f,0.000250f,0.000136f,0.000072f,0.000037f,0.000019f,0.000009f,0.000004f,0.000002f,0.142304f,0.113215f,0.087929f,
	0.066667f,0.049344f,0.035653f,0.025149f,0.017317f,0.011641f,0.007639f,0.004894f,0.003060f,0.001868f,0.001113f,0.000648f,0.000368f,0.000204f,0.000110f,0.000058f,0.000030f,0.000015f,0.000007f,0.000004f,0.000002f,0.090071f,0.069955f,0.053039f,0.039257f,0.028365f,0.020008f,0.013777f,0.009261f,0.006078f,0.003893f,0.002435f,0.001486f,0.000886f,0.000515f,0.000293f,0.000162f,0.000088f,0.000046f,0.000024f,
	0.000012f,0.000006f,0.000003f,0.000001f,0.054331f,0.041193f,0.030489f,0.022030f,0.015539f,0.010700f,0.007193f,0.004720f,0.003024f,0.001891f,0.001154f,0.000688f,0.000400f,0.000227f,0.000126f,0.000068f,0.000036f,0.000019f,0.000009f,0.000005f,0.000002f,0.000001f,0.031232f,0.023116f,0.016703f,0.011782f,0.008113f,0.005454f,0.003579f,0.002293f,0.001434f,0.000875f,0.000522f,0.000303f,0.000172f,0.000096f,
	0.000052f,0.000027f,0.000014f,0.000007f,0.000003f,0.000002f,0.017110f,0.012363f,0.008720f,0.006005f,0.004036f,0.002649f,0.001697f,0.001061f,0.000648f,0.000386f,0.000225f,0.000128f,0.000071f,0.000038f,0.000020f,0.000010f,0.000005f,0.000003f,0.000001f,0.008933f,0.006301f,0.004339f,0.002917f,0.001914f,0.001226f,0.000767f,0.000468f,0.000279f,0.000162f,0.000092f,0.000051f,0.000028f,0.000015f,0.000008f,
	0.000004f,0.000002f,0.004444f,0.003060f,0.002057f,0.001350f,0.000865f,0.000541f,0.000330f,0.000197f,0.000114f,0.000065f,0.000036f,0.000020f,0.000010f,0.000005f,0.000003f,0.000001f,0.002107f,0.001417f,0.000930f,0.000596f,0.000372f,0.000227f,0.000136f,0.000079f,0.000045f,0.000025f,0.000013f,0.000007f,0.000004f,0.000002f,0.000952f,0.000625f,0.000400f,0.000250f,0.000153f,0.000091f,0.000053f,0.000030f,
	0.000017f,0.000009f,0.000005f,0.000002f,0.000001f,0.000410f,0.000263f,0.000164f,0.000100f,0.000060f,0.000035f,0.000020f,0.000011f,0.000006f,0.000003f,0.000002f,0.000168f,0.000105f,0.000064f,0.000038f,0.000022f,0.000013f,0.000007f,0.000004f,0.000002f,0.000001f,0.000066f,0.000040f,0.000024f,0.000014f,0.000008f,0.000004f,0.000002f,0.000001f,0.000025f,0.000015f,0.000009f,0.000005f,0.000003f,0.000001f,
	0.000009f,0.000005f,0.000003f,0.000002f,0.000003f,0.000002f};

	const int FrequencyFilter::g_flog_maskpos1[1] = {
		0
	};

	const unsigned char FrequencyFilter::g_flog_mask1[269] = {

		254,255,255,31,0,0,0,0,254,255,255,31,0,0,0,0,254,255,255,15,0,0,0,0,255,255,255,1,0,0,0,192,255,255,63,0,0,0,0,248,255,255,3,0,0,0,128,255,255,31,0,0,0,0,252,255,127,0,0,0,
		0,240,255,255,0,0,0,0,224,255,127,0,0,0,0,224,255,63,0,0,0,0,240,255,15,0,0,0,0,252,255,0,0,0,0,128,255,15,0,0,0,0,248,63,0,0,0,0,192,255,0,0,0,0,0,255,0,0,0,0,
		0,126,0,0,0,0,0,30,0,0,0,0,0,7,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	};

	const int FrequencyFilter::g_flog_pos1[1] = {
		0
	};

	const filter_type FrequencyFilter::g_flog_data1[339] = {

		-0.048285f,-0.180919f,-0.365055f,-0.557182f,-0.715561f,-0.810783f,-0.831304f,-0.783023f,-0.684203f,-0.558325f,-0.427511f,-0.308239f,-0.209822f,-0.135118f,-0.082443f,-0.047721f,-0.026232f,-0.013709f,-0.006818f,-0.003232f,-0.001462f,-0.000632f,-0.000260f,-0.000102f,-0.000037f,-0.000013f,-0.000004f,-0.000001f,-0.094507f,-0.221347f,-0.397019f,-0.579468f,-0.728429f,-0.815667f,-0.830318f,-0.778429f,-0.677994f,-0.551977f,-0.421925f,-0.303813f,
		-0.206599f,-0.132935f,-0.081058f,-0.046894f,-0.025766f,-0.013460f,-0.006692f,-0.003171f,-0.001434f,-0.000619f,-0.000255f,-0.000100f,-0.000037f,-0.000012f,-0.000004f,-0.000001f,-0.331909f,-0.483834f,-0.639176f,-0.761837f,-0.826887f,-0.825356f,-0.763690f,-0.659085f,-0.533028f,-0.405422f,-0.290821f,-0.197176f,-0.126571f,-0.077029f,-0.044493f,-0.024415f,-0.012740f,-0.006329f,-0.002997f,-0.001354f,-0.000585f,-0.000241f,-0.000094f,-0.000034f,
		-0.000012f,-0.000004f,-0.000001f,-0.601199f,-0.717245f,-0.802022f,-0.835445f,-0.811271f,-0.736449f,-0.626911f,-0.501888f,-0.378810f,-0.270116f,-0.182278f,-0.116567f,-0.070723f,-0.040747f,-0.022312f,-0.011622f,-0.005765f,-0.002726f,-0.001231f,-0.000531f,-0.000218f,-0.000085f,-0.000031f,-0.000011f,-0.000003f,-0.788915f,-0.831382f,-0.830131f,-0.781972f,-0.694271f,-0.581322f,-0.459588f,-0.343533f,-0.243097f,-0.163047f,-0.103754f,-0.062695f,
		-0.036000f,-0.019658f,-0.010215f,-0.005056f,-0.002387f,-0.001076f,-0.000463f,-0.000190f,-0.000074f,-0.000027f,-0.000009f,-0.000003f,-0.834248f,-0.801575f,-0.733032f,-0.636154f,-0.523339f,-0.408070f,-0.301705f,-0.211634f,-0.140938f,-0.089164f,-0.053618f,-0.030664f,-0.016687f,-0.008646f,-0.004269f,-0.002011f,-0.000905f,-0.000389f,-0.000160f,-0.000062f,-0.000023f,-0.000008f,-0.000002f,-0.745434f,-0.663649f,-0.563574f,-0.455590f,-0.350259f,
		-0.256007f,-0.177901f,-0.117560f,-0.073897f,-0.044199f,-0.025162f,-0.013640f,-0.007044f,-0.003468f,-0.001630f,-0.000732f,-0.000314f,-0.000129f,-0.000050f,-0.000018f,-0.000006f,-0.000002f,-0.577247f,-0.480633f,-0.382183f,-0.289812f,-0.209415f,-0.144138f,-0.094488f,-0.058993f,-0.035083f,-0.019875f,-0.010729f,-0.005520f,-0.002709f,-0.001270f,-0.000569f,-0.000244f,-0.000100f,-0.000039f,-0.000014f,-0.000005f,-0.000001f,-0.393294f,-0.308062f,
		-0.230609f,-0.164808f,-0.112375f,-0.073077f,-0.045313f,-0.026788f,-0.015099f,-0.008115f,-0.004160f,-0.002035f,-0.000951f,-0.000425f,-0.000181f,-0.000074f,-0.000029f,-0.000010f,-0.000003f,-0.000001f,-0.238078f,-0.176123f,-0.124574f,-0.084180f,-0.054315f,-0.033452f,-0.019660f,-0.011024f,-0.005898f,-0.003011f,-0.001468f,-0.000684f,-0.000305f,-0.000130f,-0.000053f,-0.000020f,-0.000007f,-0.000002f,-0.128906f,-0.090312f,-0.060514f,-0.038755f,
		-0.023712f,-0.013855f,-0.007730f,-0.004117f,-0.002094f,-0.001017f,-0.000472f,-0.000210f,-0.000089f,-0.000036f,-0.000014f,-0.000005f,-0.000002f,-0.062726f,-0.041703f,-0.026521f,-0.016125f,-0.009370f,-0.005201f,-0.002758f,-0.001397f,-0.000676f,-0.000313f,-0.000139f,-0.000059f,-0.000024f,-0.000009f,-0.000003f,-0.000001f,-0.027527f,-0.017393f,-0.010513f,-0.006076f,-0.003357f,-0.001772f,-0.000894f,-0.000431f,-0.000199f,-0.000088f,-0.000037f,
		-0.000015f,-0.000006f,-0.000002f,-0.010924f,-0.006566f,-0.003776f,-0.002077f,-0.001092f,-0.000549f,-0.000264f,-0.000121f,-0.000053f,-0.000023f,-0.000009f,-0.000003f,-0.000001f,-0.003927f,-0.002248f,-0.001231f,-0.000645f,-0.000323f,-0.000155f,-0.000071f,-0.000031f,-0.000013f,-0.000005f,-0.000002f,-0.001281f,-0.000699f,-0.000365f,-0.000182f,-0.000087f,-0.000040f,-0.000017f,-0.000007f,-0.000003f,-0.000001f,-0.000380f,-0.000197f,-0.000098f,
		-0.000047f,-0.000021f,-0.000009f,-0.000004f,-0.000002f,-0.000102f,-0.000051f,-0.000024f,-0.000011f,-0.000005f,-0.000002f,-0.000025f,-0.000012f,-0.000005f,-0.000002f,-0.000006f,-0.000003f,-0.000001f,-0.000001f
	};

	const int FrequencyFilter::g_fgaussian_maskpos1[2] = {
		0, 269
	};

	const unsigned char FrequencyFilter::g_fgaussian_mask1[538] = {

		255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
		255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
		255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,255,255,255,255,231,255,255,255,255,231,255,255,255,255,241,255,255,255,127,
		252,255,255,255,135,255,255,255,127,248,255,255,255,193,255,255,255,7,255,255,255,7,254,255,255,7,254,255,255,1,255,255,127,192,255,255,7,248,255,63,128,255,255,1,252,255,3,240,255,3,224,255,1,224,255,0,240,31,0,252,
		1,128,15,0,56,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,0,254,255,255,255,127,0,0,0,254,255,255,255,63,0,0,0,255,255,255,255,15,0,0,
		192,255,255,255,255,1,0,0,248,255,255,255,31,0,0,128,255,255,255,255,0,0,0,252,255,255,255,3,0,0,240,255,255,255,3,0,0,224,255,255,255,3,0,0,224,255,255,255,1,0,0,240,255,255,127,0,0,0,252,255,
		255,7,0,0,128,255,255,127,0,0,0,248,255,255,3,0,0,192,255,255,7,0,0,0,255,255,15,0,0,0,254,255,7,0,0,0,254,255,3,0,0,0,255,127,0,0,0,192,255,15,0,0,0,248,127,0,0,0,128,255,
		1,0,0,0,252,7,0,0,0,240,7,0,0,0,224,3,0,0,0,224,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	};

	const int FrequencyFilter::g_fgaussian_pos1[2] = {
		0, 1791
	};

	const filter_type FrequencyFilter::g_fgaussian_data1[2413] = {

		1.000000f,0.996921f,0.987739f,0.972625f,0.951852f,0.925794f,0.894912f,0.859741f,0.820872f,0.778941f,0.734606f,0.688533f,0.641382f,0.593785f,0.546340f,0.499595f,0.454040f,0.410101f,0.368137f,0.328435f,0.291214f,0.256622f,0.224749f,0.195625f,0.169227f,0.145491f,0.124314f,0.105567f,0.089095f,0.074731f,0.062297f,0.051612f,0.042497f,0.034777f,0.028285f,0.022863f,0.018367f,0.014665f,0.011637f,0.009178f,
		0.007194f,0.005604f,0.004338f,0.003337f,0.002551f,0.001938f,0.001463f,0.001098f,0.000818f,0.000606f,0.000447f,0.000327f,0.000239f,0.000174f,0.000126f,0.000090f,0.000065f,0.000046f,0.000033f,0.000023f,0.000016f,0.000011f,0.000007f,0.000005f,0.000005f,0.993851f,0.984698f,0.969630f,0.948921f,0.922943f,0.892157f,0.857093f,0.818344f,0.776542f,0.732344f,0.686413f,0.639407f,0.591957f,0.544658f,0.498056f,
		0.452642f,0.408839f,0.367004f,0.327424f,0.290317f,0.255832f,0.224057f,0.195022f,0.168706f,0.145043f,0.123932f,0.105242f,0.088821f,0.074501f,0.062105f,0.051453f,0.042366f,0.034670f,0.028198f,0.022793f,0.018311f,0.014620f,0.011601f,0.009150f,0.007172f,0.005586f,0.004325f,0.003327f,0.002544f,0.001932f,0.001459f,0.001094f,0.000816f,0.000605f,0.000445f,0.000326f,0.000238f,0.000173f,0.000125f,0.000090f,
		0.000065f,0.000046f,0.000033f,0.000023f,0.000016f,0.000011f,0.000007f,0.000005f,0.000005f,0.975629f,0.960700f,0.940181f,0.914443f,0.883940f,0.849200f,0.810808f,0.769391f,0.725599f,0.680092f,0.633518f,0.586505f,0.539641f,0.493469f,0.448473f,0.405073f,0.363624f,0.324409f,0.287643f,0.253476f,0.221994f,0.193226f,0.167152f,0.143707f,0.122790f,0.104273f,0.088003f,0.073814f,0.061533f,0.050979f,0.041976f,
		0.034351f,0.027938f,0.022583f,0.018142f,0.014485f,0.011495f,0.009065f,0.007106f,0.005535f,0.004285f,0.003296f,0.002520f,0.001914f,0.001445f,0.001084f,0.000808f,0.000599f,0.000441f,0.000323f,0.000236f,0.000171f,0.000124f,0.000089f,0.000064f,0.000046f,0.000032f,0.000023f,0.000015f,0.000011f,0.000007f,0.000005f,0.000005f,0.945999f,0.925794f,0.900450f,0.870414f,0.836205f,0.798401f,0.757617f,0.714496f,
		0.669685f,0.623824f,0.577530f,0.531384f,0.485918f,0.441610f,0.398875f,0.358059f,0.319444f,0.283241f,0.249597f,0.218597f,0.190269f,0.164594f,0.141508f,0.120911f,0.102677f,0.086656f,0.072685f,0.060591f,0.050199f,0.041334f,0.033825f,0.027510f,0.022237f,0.017864f,0.014264f,0.011319f,0.008927f,0.006997f,0.005450f,0.004219f,0.003246f,0.002482f,0.001885f,0.001423f,0.001068f,0.000796f,0.000590f,0.000435f,
		0.000319f,0.000232f,0.000169f,0.000122f,0.000088f,0.000063f,0.000045f,0.000032f,0.000022f,0.000015f,0.000010f,0.000007f,0.000005f,0.000005f,0.906022f,0.881219f,0.851824f,0.818346f,0.781349f,0.741436f,0.699236f,0.655382f,0.610500f,0.565195f,0.520035f,0.475540f,0.432178f,0.390356f,0.350412f,0.312622f,0.277192f,0.244266f,0.213928f,0.186206f,0.161079f,0.138486f,0.118329f,0.100484f,0.084805f,0.071133f,
		0.059297f,0.049127f,0.040451f,0.033103f,0.026923f,0.021762f,0.017483f,0.013959f,0.011077f,0.008736f,0.006847f,0.005334f,0.004129f,0.003177f,0.002429f,0.001845f,0.001393f,0.001045f,0.000779f,0.000577f,0.000425f,0.000312f,0.000227f,0.000165f,0.000119f,0.000086f,0.000062f,0.000044f,0.000031f,0.000022f,0.000015f,0.000010f,0.000007f,0.000005f,0.000005f,0.857095f,0.828504f,0.795943f,0.759959f,0.721139f,
		0.680094f,0.637440f,0.593787f,0.549723f,0.505798f,0.462522f,0.420347f,0.379669f,0.340819f,0.304064f,0.269604f,0.237579f,0.208072f,0.181108f,0.156669f,0.134694f,0.115089f,0.097733f,0.082484f,0.069185f,0.057674f,0.047782f,0.039344f,0.032196f,0.026186f,0.021166f,0.017004f,0.013577f,0.010774f,0.008497f,0.006660f,0.005188f,0.004016f,0.003090f,0.002362f,0.001794f,0.001355f,0.001016f,0.000758f,0.000561f,
		0.000414f,0.000303f,0.000221f,0.000161f,0.000116f,0.000084f,0.000060f,0.000043f,0.000030f,0.000021f,0.000015f,0.000010f,0.000007f,0.000005f,0.000004f,0.800868f,0.769393f,0.734609f,0.697084f,0.657408f,0.616177f,0.573980f,0.531386f,0.488926f,0.447093f,0.406326f,0.367005f,0.329451f,0.293921f,0.260611f,0.229654f,0.201131f,0.175067f,0.151443f,0.130201f,0.111250f,0.094473f,0.079732f,0.066877f,0.055750f,
		0.046188f,0.038031f,0.031122f,0.025312f,0.020460f,0.016437f,0.013124f,0.010414f,0.008213f,0.006438f,0.005015f,0.003882f,0.002987f,0.002283f,0.001735f,0.001309f,0.000982f,0.000732f,0.000543f,0.000400f,0.000293f,0.000214f,0.000155f,0.000112f,0.000081f,0.000058f,0.000041f,0.000029f,0.000020f,0.000014f,0.000010f,0.000007f,0.000005f,0.000004f,0.739154f,0.705737f,0.669687f,0.631571f,0.591960f,0.551422f,
		0.510501f,0.469711f,0.429522f,0.390356f,0.352581f,0.316503f,0.282369f,0.250368f,0.220629f,0.193226f,0.168186f,0.145491f,0.125084f,0.106878f,0.090760f,0.076599f,0.064249f,0.053559f,0.044373f,0.036537f,0.029899f,0.024317f,0.019656f,0.015791f,0.012608f,0.010005f,0.007891f,0.006185f,0.004818f,0.003730f,0.002869f,0.002194f,0.001666f,0.001258f,0.000944f,0.000703f,0.000521f,0.000384f,0.000282f,0.000205f,
		0.000149f,0.000108f,0.000078f,0.000056f,0.000040f,0.000028f,0.000020f,0.000013f,0.000009f,0.000006f,0.000005f,0.000004f,0.673831f,0.639411f,0.603017f,0.565198f,0.526493f,0.487422f,0.448475f,0.410103f,0.372709f,0.336641f,0.302194f,0.269604f,0.239049f,0.210654f,0.184490f,0.160583f,0.138914f,0.119429f,0.102046f,0.086657f,0.073136f,0.061344f,0.051138f,0.042367f,0.034885f,0.028548f,0.023218f,0.018768f,
		0.015077f,0.012038f,0.009553f,0.007534f,0.005905f,0.004600f,0.003561f,0.002740f,0.002094f,0.001591f,0.001201f,0.000901f,0.000672f,0.000498f,0.000367f,0.000269f,0.000196f,0.000142f,0.000103f,0.000074f,0.000053f,0.000038f,0.000027f,0.000019f,0.000013f,0.000009f,0.000006f,0.000004f,0.000004f,0.606749f,0.572214f,0.536327f,0.499599f,0.462523f,0.425566f,0.389155f,0.353670f,0.319445f,0.286757f,0.255832f,
		0.226838f,0.199894f,0.175066f,0.152380f,0.131818f,0.113329f,0.096834f,0.082230f,0.069400f,0.058211f,0.048525f,0.040203f,0.033103f,0.027089f,0.022032f,0.017809f,0.014307f,0.011423f,0.009065f,0.007149f,0.005603f,0.004365f,0.003379f,0.002600f,0.001987f,0.001510f,0.001140f,0.000855f,0.000637f,0.000472f,0.000348f,0.000255f,0.000186f,0.000135f,0.000098f,0.000070f,0.000051f,0.000036f,0.000025f,0.000018f,
		0.000012f,0.000008f,0.000006f,0.000004f,0.000004f,0.539646f,0.505801f,0.471163f,0.436198f,0.401344f,0.367005f,0.333540f,0.301263f,0.270436f,0.241271f,0.213927f,0.188516f,0.165102f,0.143707f,0.124315f,0.106878f,0.091322f,0.077550f,0.065450f,0.054898f,0.045764f,0.037915f,0.031219f,0.025547f,0.020778f,0.016795f,0.013493f,0.010773f,0.008549f,0.006742f,0.005285f,0.004117f,0.003187f,0.002452f,0.001874f,
		0.001424f,0.001075f,0.000806f,0.000601f,0.000445f,0.000328f,0.000241f,0.000175f,0.000127f,0.000092f,0.000066f,0.000048f,0.000034f,0.000024f,0.000017f,0.000012f,0.000008f,0.000005f,0.000004f,0.000003f,0.474078f,0.441613f,0.408841f,0.376173f,0.343988f,0.312622f,0.282368f,0.253475f,0.226139f,0.200510f,0.176693f,0.154747f,0.134694f,0.116518f,0.100175f,0.085595f,0.072686f,0.061345f,0.051455f,0.042893f,
		0.035537f,0.029261f,0.023945f,0.019475f,0.015742f,0.012646f,0.010097f,0.008013f,0.006319f,0.004953f,0.003858f,0.002987f,0.002298f,0.001757f,0.001335f,0.001007f,0.000756f,0.000563f,0.000418f,0.000308f,0.000225f,0.000164f,0.000119f,0.000086f,0.000062f,0.000045f,0.000032f,0.000023f,0.000016f,0.000011f,0.000007f,0.000005f,0.000004f,0.000003f,0.411371f,0.380843f,0.350413f,0.320431f,0.291213f,0.263032f,
		0.236117f,0.210653f,0.186779f,0.164593f,0.144150f,0.125470f,0.108539f,0.093315f,0.079733f,0.067709f,0.057144f,0.047931f,0.039956f,0.033103f,0.027257f,0.022305f,0.018141f,0.014664f,0.011780f,0.009406f,0.007464f,0.005887f,0.004614f,0.003594f,0.002782f,0.002141f,0.001636f,0.001243f,0.000938f,0.000704f,0.000525f,0.000389f,0.000287f,0.000210f,0.000153f,0.000111f,0.000081f,0.000058f,0.000042f,0.000030f,
		0.000021f,0.000015f,0.000010f,0.000007f,0.000005f,0.000003f,0.000003f,0.352581f,0.324409f,0.296652f,0.269602f,0.243512f,0.218594f,0.195020f,0.172918f,0.152378f,0.133453f,0.116159f,0.100484f,0.086390f,0.073816f,0.062684f,0.052903f,0.044374f,0.036991f,0.030647f,0.025234f,0.020650f,0.016795f,0.013576f,0.010906f,0.008708f,0.006910f,0.005450f,0.004272f,0.003327f,0.002576f,0.001982f,0.001515f,0.001151f,
		0.000869f,0.000652f,0.000486f,0.000360f,0.000265f,0.000194f,0.000142f,0.000103f,0.000075f,0.000054f,0.000039f,0.000027f,0.000019f,0.000014f,0.000009f,0.000006f,0.000004f,0.000003f,0.000003f,0.298487f,0.272949f,0.248060f,0.224055f,0.201128f,0.179437f,0.159102f,0.140203f,0.122790f,0.106878f,0.092455f,0.079487f,0.067918f,0.057675f,0.048676f,0.040828f,0.034035f,0.028198f,0.023218f,0.019000f,0.015453f,
		0.012491f,0.010035f,0.008012f,0.006358f,0.005014f,0.003930f,0.003062f,0.002370f,0.001823f,0.001394f,0.001059f,0.000799f,0.000600f,0.000447f,0.000331f,0.000244f,0.000179f,0.000131f,0.000095f,0.000069f,0.000049f,0.000035f,0.000025f,0.000018f,0.000012f,0.000009f,0.000006f,0.000004f,0.000003f,0.000003f,0.249595f,0.226836f,0.204884f,0.183919f,0.164085f,0.145489f,0.128207f,0.112284f,0.097733f,0.084545f,
		0.072686f,0.062107f,0.052741f,0.044511f,0.037335f,0.031123f,0.025785f,0.021231f,0.017374f,0.014131f,0.011422f,0.009176f,0.007327f,0.005814f,0.004585f,0.003594f,0.002800f,0.002167f,0.001667f,0.001275f,0.000968f,0.000731f,0.000548f,0.000409f,0.000303f,0.000223f,0.000164f,0.000119f,0.000087f,0.000063f,0.000045f,0.000032f,0.000023f,0.000016f,0.000011f,0.000008f,0.000005f,0.000004f,0.000003f,0.000002f,
		0.206152f,0.186202f,0.167149f,0.149123f,0.132223f,0.116517f,0.102045f,0.088821f,0.076836f,0.066059f,0.056444f,0.047932f,0.040453f,0.033931f,0.028285f,0.023434f,0.019295f,0.015790f,0.012842f,0.010381f,0.008339f,0.006659f,0.005284f,0.004167f,0.003266f,0.002544f,0.001970f,0.001515f,0.001158f,0.000880f,0.000664f,0.000498f,0.000372f,0.000275f,0.000203f,0.000149f,0.000108f,0.000079f,0.000057f,0.000041f,
		0.000029f,0.000021f,0.000015f,0.000010f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.168183f,0.150974f,0.134692f,0.119427f,0.105241f,0.092170f,0.080226f,0.069400f,0.059666f,0.050981f,0.043293f,0.036538f,0.030647f,0.025548f,0.021166f,0.017428f,0.014262f,0.011600f,0.009376f,0.007532f,0.006014f,0.004772f,0.003764f,0.002950f,0.002298f,0.001779f,0.001369f,0.001046f,0.000795f,0.000600f,0.000450f,
		0.000336f,0.000249f,0.000183f,0.000134f,0.000098f,0.000071f,0.000051f,0.000037f,0.000027f,0.000019f,0.000013f,0.000009f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.135525f,0.120909f,0.107207f,0.094472f,0.082739f,0.072017f,0.062299f,0.053561f,0.045765f,0.038863f,0.032799f,0.027511f,0.022934f,0.019000f,0.015645f,0.012803f,0.010413f,0.008417f,0.006762f,0.005399f,0.004284f,0.003379f,0.002648f,
		0.002063f,0.001597f,0.001229f,0.000939f,0.000714f,0.000539f,0.000404f,0.000301f,0.000223f,0.000164f,0.000121f,0.000088f,0.000064f,0.000046f,0.000033f,0.000024f,0.000017f,0.000012f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.107870f,0.095645f,0.084284f,0.073816f,0.064250f,0.055580f,0.047784f,0.040829f,0.034672f,0.029262f,0.024544f,0.020460f,0.016951f,0.013958f,0.011422f,0.009290f,
		0.007509f,0.006032f,0.004817f,0.003822f,0.003014f,0.002363f,0.001840f,0.001425f,0.001096f,0.000838f,0.000637f,0.000481f,0.000360f,0.000269f,0.000199f,0.000147f,0.000108f,0.000078f,0.000057f,0.000041f,0.000030f,0.000021f,0.000015f,0.000011f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.000002f,0.084805f,0.074732f,0.065450f,0.056969f,0.049281f,0.042369f,0.036202f,0.030742f,0.025946f,0.021763f,
		0.018142f,0.015030f,0.012376f,0.010128f,0.008237f,0.006658f,0.005349f,0.004271f,0.003389f,0.002673f,0.002095f,0.001632f,0.001263f,0.000972f,0.000743f,0.000564f,0.000426f,0.000320f,0.000238f,0.000177f,0.000130f,0.000095f,0.000070f,0.000051f,0.000037f,0.000026f,0.000019f,0.000013f,0.000010f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.000001f,0.065855f,0.057676f,0.050202f,0.043427f,0.037336f,
		0.031902f,0.027091f,0.022864f,0.019178f,0.015987f,0.013245f,0.010906f,0.008925f,0.007258f,0.005867f,0.004713f,0.003763f,0.002986f,0.002355f,0.001846f,0.001438f,0.001113f,0.000856f,0.000655f,0.000497f,0.000375f,0.000282f,0.000210f,0.000156f,0.000115f,0.000084f,0.000061f,0.000045f,0.000032f,0.000023f,0.000017f,0.000012f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.050512f,
		0.043966f,0.038034f,0.032699f,0.027940f,0.023726f,0.020024f,0.016796f,0.014001f,0.011600f,0.009551f,0.007816f,0.006357f,0.005138f,0.004128f,0.003296f,0.002615f,0.002063f,0.001617f,0.001259f,0.000975f,0.000750f,0.000573f,0.000436f,0.000329f,0.000247f,0.000184f,0.000136f,0.000100f,0.000074f,0.000054f,0.000039f,0.000028f,0.000020f,0.000015f,0.000010f,0.000007f,0.000005f,0.000004f,0.000002f,0.000002f,
		0.000001f,0.000001f,0.038269f,0.033105f,0.028462f,0.024319f,0.020651f,0.017429f,0.014619f,0.012187f,0.010097f,0.008314f,0.006803f,0.005533f,0.004473f,0.003593f,0.002869f,0.002277f,0.001795f,0.001407f,0.001096f,0.000849f,0.000653f,0.000499f,0.000379f,0.000286f,0.000215f,0.000160f,0.000119f,0.000087f,0.000064f,0.000047f,0.000034f,0.000025f,0.000018f,0.000013f,0.000009f,0.000006f,0.000004f,0.000003f,
		0.000002f,0.000001f,0.000001f,0.028638f,0.024621f,0.021037f,0.017865f,0.015077f,0.012646f,0.010542f,0.008734f,0.007192f,0.005885f,0.004787f,0.003869f,0.003108f,0.002482f,0.001969f,0.001553f,0.001217f,0.000948f,0.000734f,0.000565f,0.000432f,0.000328f,0.000248f,0.000186f,0.000138f,0.000103f,0.000076f,0.000055f,0.000040f,0.000029f,0.000021f,0.000015f,0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,
		0.000002f,0.000001f,0.021168f,0.018087f,0.015359f,0.012962f,0.010873f,0.009064f,0.007509f,0.006183f,0.005060f,0.004115f,0.003326f,0.002672f,0.002134f,0.001693f,0.001335f,0.001047f,0.000815f,0.000631f,0.000486f,0.000371f,0.000282f,0.000213f,0.000160f,0.000119f,0.000088f,0.000065f,0.000048f,0.000035f,0.000025f,0.000018f,0.000013f,0.000009f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.000001f,
		0.015454f,0.013123f,0.011076f,0.009290f,0.007744f,0.006416f,0.005283f,0.004323f,0.003516f,0.002842f,0.002283f,0.001823f,0.001447f,0.001141f,0.000894f,0.000697f,0.000539f,0.000415f,0.000317f,0.000241f,0.000182f,0.000136f,0.000102f,0.000075f,0.000056f,0.000041f,0.000030f,0.000022f,0.000016f,0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.011144f,0.009405f,0.007889f,0.006576f,
		0.005449f,0.004486f,0.003671f,0.002986f,0.002414f,0.001939f,0.001548f,0.001229f,0.000969f,0.000759f,0.000592f,0.000458f,0.000352f,0.000269f,0.000205f,0.000154f,0.000116f,0.000086f,0.000064f,0.000047f,0.000035f,0.000025f,0.000018f,0.000013f,0.000010f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.000001f,0.007938f,0.006658f,0.005550f,0.004598f,0.003786f,0.003098f,0.002520f,0.002037f,0.001636f,
		0.001307f,0.001037f,0.000818f,0.000641f,0.000499f,0.000386f,0.000297f,0.000227f,0.000173f,0.000130f,0.000098f,0.000073f,0.000054f,0.000040f,0.000029f,0.000021f,0.000015f,0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.005585f,0.004655f,0.003857f,0.003176f,0.002599f,0.002114f,0.001709f,0.001373f,0.001096f,0.000870f,0.000686f,0.000538f,0.000419f,0.000324f,0.000249f,0.000191f,
		0.000145f,0.000109f,0.000082f,0.000061f,0.000045f,0.000033f,0.000024f,0.000018f,0.000013f,0.000009f,0.000007f,0.000005f,0.000003f,0.000002f,0.000002f,0.000001f,0.003881f,0.003215f,0.002647f,0.002166f,0.001762f,0.001424f,0.001144f,0.000914f,0.000725f,0.000572f,0.000448f,0.000349f,0.000270f,0.000208f,0.000159f,0.000121f,0.000091f,0.000068f,0.000051f,0.000038f,0.000028f,0.000020f,0.000015f,0.000011f,
		0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.002664f,0.002193f,0.001795f,0.001460f,0.001180f,0.000948f,0.000757f,0.000601f,0.000474f,0.000371f,0.000289f,0.000224f,0.000172f,0.000132f,0.000100f,0.000076f,0.000057f,0.000042f,0.000031f,0.000023f,0.000017f,0.000012f,0.000009f,0.000006f,0.000005f,0.000003f,0.000002f,0.000002f,0.000001f,0.001806f,0.001478f,0.001202f,0.000972f,0.000781f,
		0.000623f,0.000495f,0.000390f,0.000306f,0.000238f,0.000184f,0.000142f,0.000108f,0.000082f,0.000062f,0.000047f,0.000035f,0.000026f,0.000019f,0.000014f,0.000010f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.001209f,0.000984f,0.000795f,0.000639f,0.000510f,0.000405f,0.000319f,0.000250f,0.000195f,0.000151f,0.000116f,0.000089f,0.000067f,0.000051f,0.000038f,0.000028f,0.000021f,0.000016f,
		0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000800f,0.000647f,0.000520f,0.000415f,0.000329f,0.000260f,0.000203f,0.000158f,0.000123f,0.000094f,0.000072f,0.000055f,0.000041f,0.000031f,0.000023f,0.000017f,0.000013f,0.000009f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000523f,0.000420f,0.000335f,0.000266f,0.000210f,0.000164f,0.000128f,0.000099f,
		0.000076f,0.000058f,0.000044f,0.000033f,0.000025f,0.000019f,0.000014f,0.000010f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000337f,0.000269f,0.000214f,0.000169f,0.000132f,0.000103f,0.000080f,0.000061f,0.000047f,0.000036f,0.000027f,0.000020f,0.000015f,0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000215f,0.000171f,0.000135f,0.000105f,
		0.000082f,0.000064f,0.000049f,0.000037f,0.000028f,0.000021f,0.000016f,0.000012f,0.000009f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000135f,0.000107f,0.000084f,0.000065f,0.000050f,0.000039f,0.000030f,0.000023f,0.000017f,0.000013f,0.000010f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000084f,0.000066f,0.000051f,0.000040f,0.000031f,0.000023f,0.000018f,
		0.000013f,0.000010f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000052f,0.000040f,0.000031f,0.000024f,0.000018f,0.000014f,0.000011f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000031f,0.000024f,0.000019f,0.000014f,0.000011f,0.000008f,0.000006f,0.000005f,0.000003f,0.000003f,0.000002f,0.000001f,0.000019f,0.000014f,0.000011f,0.000008f,0.000006f,
		0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000011f,0.000009f,0.000006f,0.000005f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000007f,0.000005f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000004f,0.000003f,0.000002f,0.000002f,0.000001f,0.000002f,0.000002f,0.000001f,0.000001f,1.000000f,0.990790f,0.963668f,0.920102f,0.862399f,0.793493f,0.716706f,0.635480f,0.553127f,
		0.472618f,0.396423f,0.326416f,0.263844f,0.209356f,0.163076f,0.124697f,0.093603f,0.068974f,0.049893f,0.035429f,0.024697f,0.016899f,0.011352f,0.007486f,0.004846f,0.003079f,0.001921f,0.001177f,0.000707f,0.000418f,0.000242f,0.000138f,0.000077f,0.000042f,0.000023f,0.000012f,0.000006f,0.000003f,0.000002f,0.981666f,0.954793f,0.911628f,0.854457f,0.786186f,0.710106f,0.629627f,0.548033f,0.468266f,0.392773f,
		0.323410f,0.261414f,0.207428f,0.161574f,0.123549f,0.092741f,0.068339f,0.049434f,0.035103f,0.024469f,0.016744f,0.011247f,0.007417f,0.004801f,0.003051f,0.001903f,0.001166f,0.000701f,0.000414f,0.000240f,0.000136f,0.000076f,0.000042f,0.000022f,0.000012f,0.000006f,0.000003f,0.000002f,0.928655f,0.886673f,0.831066f,0.764664f,0.690667f,0.612391f,0.533031f,0.455447f,0.382020f,0.314556f,0.254258f,0.201750f,
		0.157151f,0.120167f,0.090202f,0.066468f,0.048080f,0.034142f,0.023799f,0.016285f,0.010939f,0.007214f,0.004670f,0.002968f,0.001851f,0.001134f,0.000682f,0.000402f,0.000233f,0.000133f,0.000074f,0.000040f,0.000022f,0.000011f,0.000006f,0.000003f,0.000002f,0.846588f,0.793495f,0.730095f,0.659443f,0.584706f,0.508933f,0.434857f,0.364750f,0.300336f,0.242763f,0.192629f,0.150046f,0.114734f,0.086124f,0.063463f,
		0.045907f,0.032598f,0.022723f,0.015549f,0.010445f,0.006888f,0.004459f,0.002833f,0.001768f,0.001083f,0.000651f,0.000384f,0.000223f,0.000127f,0.000071f,0.000039f,0.000021f,0.000011f,0.000006f,0.000003f,0.000001f,0.743732f,0.684308f,0.618087f,0.548037f,0.477016f,0.407586f,0.341875f,0.281501f,0.227538f,0.180549f,0.140636f,0.107539f,0.080723f,0.059483f,0.043028f,0.030554f,0.021298f,0.014574f,0.009790f,
		0.006456f,0.004179f,0.002656f,0.001657f,0.001015f,0.000610f,0.000360f,0.000209f,0.000119f,0.000066f,0.000036f,0.000019f,0.000010f,0.000005f,0.000003f,0.000001f,0.629632f,0.568702f,0.504249f,0.438903f,0.375020f,0.314559f,0.259009f,0.209358f,0.166123f,0.129400f,0.098947f,0.074273f,0.054730f,0.039590f,0.028113f,0.019597f,0.013410f,0.009008f,0.005940f,0.003845f,0.002443f,0.001524f,0.000934f,0.000561f,
		0.000331f,0.000192f,0.000109f,0.000061f,0.000033f,0.000018f,0.000009f,0.000005f,0.000002f,0.000001f,0.513668f,0.455452f,0.396430f,0.338729f,0.284119f,0.233944f,0.189098f,0.150047f,0.116878f,0.089371f,0.067086f,0.049434f,0.035759f,0.025392f,0.017700f,0.012112f,0.008136f,0.005365f,0.003473f,0.002207f,0.001377f,0.000843f,0.000507f,0.000299f,0.000173f,0.000099f,0.000055f,0.000030f,0.000016f,0.000009f,
		0.000004f,0.000002f,0.000001f,0.403835f,0.351501f,0.300339f,0.251919f,0.207431f,0.167667f,0.133042f,0.103631f,0.079243f,0.059483f,0.043831f,0.031706f,0.022514f,0.015694f,0.010739f,0.007214f,0.004757f,0.003079f,0.001957f,0.001221f,0.000748f,0.000450f,0.000265f,0.000154f,0.000087f,0.000049f,0.000027f,0.000014f,0.000008f,0.000004f,0.000002f,0.000001f,0.305949f,0.261418f,0.219273f,0.180549f,0.145939f,
		0.115801f,0.090202f,0.068974f,0.051774f,0.038151f,0.027597f,0.019597f,0.013660f,0.009348f,0.006279f,0.004141f,0.002680f,0.001703f,0.001063f,0.000651f,0.000391f,0.000231f,0.000134f,0.000076f,0.000042f,0.000023f,0.000012f,0.000007f,0.000003f,0.000002f,0.223368f,0.187357f,0.154270f,0.124697f,0.098946f,0.077073f,0.058934f,0.044238f,0.032598f,0.023580f,0.016744f,0.011672f,0.007987f,0.005365f,0.003538f,
		0.002290f,0.001455f,0.000908f,0.000556f,0.000334f,0.000197f,0.000114f,0.000065f,0.000036f,0.000020f,0.000011f,0.000006f,0.000003f,0.000001f,0.157152f,0.129399f,0.104594f,0.082994f,0.064647f,0.049433f,0.037106f,0.027343f,0.019779f,0.014045f,0.009790f,0.006699f,0.004500f,0.002967f,0.001921f,0.001221f,0.000762f,0.000466f,0.000280f,0.000166f,0.000096f,0.000055f,0.000030f,0.000017f,0.000009f,0.000005f,
		0.000002f,0.000001f,0.106547f,0.086123f,0.068337f,0.053231f,0.040703f,0.030553f,0.022514f,0.016286f,0.011565f,0.008061f,0.005516f,0.003705f,0.002443f,0.001582f,0.001005f,0.000627f,0.000384f,0.000231f,0.000136f,0.000079f,0.000045f,0.000025f,0.000014f,0.000007f,0.000004f,0.000002f,0.000001f,0.069613f,0.055237f,0.043027f,0.032901f,0.024697f,0.018198f,0.013164f,0.009348f,0.006516f,0.004459f,0.002995f,
		0.001975f,0.001279f,0.000812f,0.000507f,0.000310f,0.000187f,0.000110f,0.000064f,0.000036f,0.000020f,0.000011f,0.000006f,0.000003f,0.000002f,0.043830f,0.034141f,0.026106f,0.019596f,0.014440f,0.010445f,0.007417f,0.005170f,0.003538f,0.002377f,0.001567f,0.001014f,0.000645f,0.000402f,0.000246f,0.000148f,0.000087f,0.000051f,0.000029f,0.000016f,0.000009f,0.000005f,0.000002f,0.000001f,0.026594f,0.020335f,
		0.015264f,0.011248f,0.008136f,0.005778f,0.004027f,0.002756f,0.001851f,0.001221f,0.000790f,0.000502f,0.000313f,0.000192f,0.000115f,0.000068f,0.000039f,0.000022f,0.000013f,0.000007f,0.000004f,0.000002f,0.000001f,0.015549f,0.011672f,0.008601f,0.006222f,0.004418f,0.003080f,0.002107f,0.001416f,0.000933f,0.000604f,0.000384f,0.000240f,0.000147f,0.000088f,0.000052f,0.000030f,0.000017f,0.000010f,0.000005f,
		0.000003f,0.000001f,0.008762f,0.006456f,0.004670f,0.003316f,0.002312f,0.001582f,0.001063f,0.000701f,0.000454f,0.000288f,0.000180f,0.000110f,0.000066f,0.000039f,0.000023f,0.000013f,0.000007f,0.000004f,0.000002f,0.000001f,0.004757f,0.003441f,0.002444f,0.001703f,0.001166f,0.000783f,0.000516f,0.000334f,0.000212f,0.000133f,0.000081f,0.000049f,0.000029f,0.000017f,0.000009f,0.000005f,0.000003f,0.000002f,
		0.002489f,0.001768f,0.001232f,0.000843f,0.000566f,0.000373f,0.000242f,0.000154f,0.000096f,0.000059f,0.000035f,0.000021f,0.000012f,0.000007f,0.000004f,0.000002f,0.000001f,0.001255f,0.000875f,0.000599f,0.000402f,0.000265f,0.000172f,0.000109f,0.000068f,0.000042f,0.000025f,0.000015f,0.000009f,0.000005f,0.000003f,0.000001f,0.000610f,0.000417f,0.000280f,0.000185f,0.000120f,0.000076f,0.000047f,0.000029f,
		0.000017f,0.000010f,0.000006f,0.000003f,0.000002f,0.000001f,0.000286f,0.000192f,0.000127f,0.000082f,0.000052f,0.000032f,0.000020f,0.000012f,0.000007f,0.000004f,0.000002f,0.000001f,0.000129f,0.000085f,0.000055f,0.000035f,0.000022f,0.000013f,0.000008f,0.000005f,0.000003f,0.000002f,0.000056f,0.000036f,0.000023f,0.000014f,0.000009f,0.000005f,0.000003f,0.000002f,0.000001f,0.000023f,0.000015f,0.000009f,
		0.000006f,0.000003f,0.000002f,0.000001f,0.000009f,0.000006f,0.000004f,0.000002f,0.000001f,0.000004f,0.000002f,0.000001f,0.000001f
	};

	// more constants

	const int FrequencyFilter::imageSize = FBLOCK_WIDTH * FBLOCK_WIDTH;
	const int FrequencyFilter::fblock_size = FBLOCK_WIDTH * FHWIDTH;
	const float FrequencyFilter::fft_scale_factor = 1.0 / (FBLOCK_WIDTH * FBLOCK_WIDTH);
	const int FrequencyFilter::total_memory = sizeof(float) * imageSize + sizeof(fftwf_complex) * fblock_size + sizeof(fftwf_complex) * fblock_size;

	// methods

void FrequencyFilter::open_lib()
{
	// there's no fftwf_init();
#if defined(_OPENMP)
	fftwf_init_threads();
#endif
}

void FrequencyFilter::close_lib()
{
#if defined(_OPENMP)
	fftwf_cleanup_threads();
#else
	fftwf_cleanup();
#endif

}

void FrequencyFilter::complex_mutil(fftwf_complex *srcA, const node srcB, fftwf_complex *dest,size_t size, int fwidth, float factor)
{
	int j, k, h;
	int ii, jj;
	float v;
	j = 0;
	k = 0;
	h = 0;
	int locate_1;
	int locate_2;
	int locate_3;
	int locate_4;
	int pos1, pos2;
	pos1 = 0;
	pos2 = (fwidth + fwidth - 2) * fwidth;
	memset(dest, 0, sizeof(fftwf_complex)*size);
	for(ii = 0; ii < fwidth; ii++)
	{
		locate_1 = locate_2 = pos1 + ii;
		locate_3 = locate_4 = pos2 + ii;
		pos1 += fwidth;
		pos2 -= fwidth;
		for(jj = ii; jj < fwidth; jj++)
		{
			if(srcB.mask[k] & bits[h])
			{
				v = (float)srcB.data[j] * factor;
				dest[locate_1][0] = srcA[locate_1][0] * v;
				dest[locate_1][1] = srcA[locate_1][1] * v;

				dest[locate_2][0] = srcA[locate_2][0] * v;
				dest[locate_2][1] = srcA[locate_2][1] * v;

				if(ii > 0 && ii < fwidth - 1)
				{
					dest[locate_3][0] = srcA[locate_3][0] * v;
					dest[locate_3][1] = srcA[locate_3][1] * v;
				}
				if(jj > 0 && jj < fwidth - 1)
				{
					dest[locate_4][0] = srcA[locate_4][0] * v;
					dest[locate_4][1] = srcA[locate_4][1] * v;
				}

				j++;
			}
			h++;
			if(h == 8)
			{
				h = 0;
				k++;
			}
			locate_1++;
			locate_2 += fwidth;
			locate_3++;
			locate_4 -= fwidth;
		}
	}
}

void FrequencyFilter::Convolution(int o_cur, int type, int loc)
{
	node res;
	if(o_cur == 0)
	{
		res.data = type ? g_fgaussian_data0:g_flog_data0;
		res.mask = type ? g_fgaussian_mask0:g_flog_mask0;
		res.mask_pos = type ? g_fgaussian_maskpos0:g_flog_maskpos0;
		res.pos = type ? g_fgaussian_pos0:g_flog_pos0;
	}
	else
	{
		res.data = type ? g_fgaussian_data1:g_flog_data1;
		res.mask = type ? g_fgaussian_mask1:g_flog_mask1;
		res.mask_pos = type ? g_fgaussian_maskpos1:g_flog_maskpos1;
		res.pos = type ? g_fgaussian_pos1:g_flog_pos1;
	}
	res.pos = res.pos + loc;
	res.mask_pos = res.mask_pos + loc;
	res.data = res.data + res.pos[0];
	res.mask = res.mask + res.mask_pos[0];

	complex_mutil(fblock, res, fblock_flog, fblock_size, FHWIDTH, fft_scale_factor);
	fftwf_execute(ifftplan);
}

void FrequencyFilter::Init()
{
	#pragma omp critical
	{
		inmat = (float*) fftwf_malloc (sizeof(float) * imageSize) ;
#ifndef SPACIAL_FILTERING
		fblock     = (fftwf_complex*) fftwf_malloc (sizeof(fftwf_complex) * fblock_size) ;
		fblock_flog = (fftwf_complex*) fftwf_malloc (sizeof(fftwf_complex) * fblock_size) ;

		fftplan = fftwf_plan_dft_r2c_2d(FBLOCK_WIDTH, FBLOCK_WIDTH, inmat, fblock, FFTW_ESTIMATE);
		ifftplan = fftwf_plan_dft_c2r_2d(FBLOCK_WIDTH, FBLOCK_WIDTH, fblock_flog, inmat, FFTW_ESTIMATE);
#endif
	}
}

void FrequencyFilter::Release()
{
	#pragma omp critical
	{
		if (inmat) fftwf_free (inmat);
#ifndef SPACIAL_FILTERING
		if (fblock) fftwf_free(fblock);
		if (fblock_flog) fftwf_free(fblock_flog);
		if (fftplan) fftwf_destroy_plan(fftplan);
		if (ifftplan) fftwf_destroy_plan(ifftplan);
#endif
	}
}



AlpOctaveBF::AlpOctaveBF():height(0),width(0),octave(0),keypoints(),capacity(0) 
{
	G1 = G2 = G3 = G4 = L1 = L2 = L3 = L4 = A = B = C = D = tmp = NULL;
	minResponse = maxResponse = minScale = maxScale = grad = NULL;

	filters = NULL;
	log_gradient_buffer = NULL;
	block_buffer = NULL;
	next_octave_input = NULL;
	windowSize = NBP / 2;
	padWidth = MAX_FILTER_WIDTH / 2;
}


AlpOctaveBF::~AlpOctaveBF()
{
	Clear();
}



void AlpOctaveBF::conv2(const float * imagein, const Filter & filter, float * imageout) const
{
	// this operation needs a temporary image of size [width, height]
	// filter must contain a 2D separable filter
	// use vl_feat filtering function

	alp_smooth( imageout, tmp, imagein, FBLOCK_WIDTH, FBLOCK_WIDTH, filter.kernel, filter.ntaps);

}
#define EXPN_SZ  256          /**< ::fast_expn table size @internal */
#define EXPN_MAX 25.0         /**< ::fast_expn table max  @internal */
static const double expn_tab [EXPN_SZ+1]  /**< ::fast_expn table      @internal */
= {
	1, 0.906961, 0.822578, 0.746045, 0.676634, 0.61368, 0.556584, 0.5048, 0.457833, 0.415237,  // 10
	0.376603, 0.341564, 0.309786, 0.280963, 0.254823, 0.231114, 0.209611, 0.190109, 0.172422, 0.15638,  // 20
	0.14183, 0.128634, 0.116666, 0.105812, 0.0959671, 0.0870384, 0.0789404, 0.0715958, 0.0649346, 0.0588931,  // 30
	0.0534137, 0.0484441, 0.0439369, 0.0398491, 0.0361415, 0.0327789, 0.0297292, 0.0269632, 0.0244546, 0.0221793,  // 40
	0.0201158, 0.0182442, 0.0165468, 0.0150073, 0.013611, 0.0123447, 0.0111961, 0.0101544, 0.00920968, 0.00835282,  // 50
	0.00757568, 0.00687084, 0.00623158, 0.0056518, 0.00512596, 0.00464904, 0.0042165, 0.0038242, 0.0034684, 0.0031457,  // 60
	0.00285303, 0.00258758, 0.00234684, 0.00212849, 0.00193045, 0.00175085, 0.00158795, 0.00144021, 0.00130621, 0.00118468,  // 70
	0.00107446, 0.000974492, 0.000883826, 0.000801596, 0.000727016, 0.000659375, 0.000598027, 0.000542387, 0.000491923, 0.000446155,  // 80
	0.000404645, 0.000366997, 0.000332852, 0.000301884, 0.000273797, 0.000248323, 0.000225219, 0.000204265, 0.00018526, 0.000168024,  // 90
	0.000152391, 0.000138212, 0.000125353, 0.00011369, 0.000103113, 9.35192e-05, 8.48182e-05, 7.69268e-05, 6.97696e-05, 6.32783e-05,  // 100
	5.73909e-05, 5.20513e-05, 4.72085e-05, 4.28162e-05, 3.88326e-05, 3.52197e-05, 3.19428e-05, 2.89709e-05, 2.62755e-05, 2.38308e-05,  // 110
	2.16136e-05, 1.96027e-05, 1.77789e-05, 1.61247e-05, 1.46245e-05, 1.32638e-05, 1.20298e-05, 1.09105e-05, 9.89543e-06, 8.97477e-06,  // 120
	8.13976e-06, 7.38244e-06, 6.69558e-06, 6.07263e-06, 5.50764e-06, 4.99521e-06, 4.53046e-06, 4.10895e-06, 3.72665e-06, 3.37993e-06,  // 130
	3.06546e-06, 2.78025e-06, 2.52158e-06, 2.28697e-06, 2.07419e-06, 1.88121e-06, 1.70619e-06, 1.54744e-06, 1.40347e-06, 1.27289e-06,  // 140
	1.15446e-06, 1.04705e-06, 9.49636e-07, 8.61282e-07, 7.81149e-07, 7.08471e-07, 6.42556e-07, 5.82773e-07, 5.28552e-07, 4.79376e-07,  // 150
	4.34775e-07, 3.94324e-07, 3.57636e-07, 3.24362e-07, 2.94183e-07, 2.66813e-07, 2.41989e-07, 2.19474e-07, 1.99054e-07, 1.80535e-07,  // 160
	1.63738e-07, 1.48504e-07, 1.34687e-07, 1.22156e-07, 1.1079e-07, 1.00483e-07, 9.11338e-08, 8.26547e-08, 7.49646e-08, 6.79899e-08,  // 170
	6.16642e-08, 5.5927e-08, 5.07236e-08, 4.60043e-08, 4.17241e-08, 3.78421e-08, 3.43213e-08, 3.11281e-08, 2.82319e-08, 2.56052e-08,  // 180
	2.32229e-08, 2.10623e-08, 1.91027e-08, 1.73254e-08, 1.57134e-08, 1.42515e-08, 1.29255e-08, 1.17229e-08, 1.06322e-08, 9.64302e-09,  // 190
	8.74584e-09, 7.93213e-09, 7.19413e-09, 6.5248e-09, 5.91773e-09, 5.36715e-09, 4.86779e-09, 4.4149e-09, 4.00414e-09, 3.6316e-09,  // 200
	3.29371e-09, 2.98727e-09, 2.70934e-09, 2.45726e-09, 2.22864e-09, 2.02129e-09, 1.83323e-09, 1.66267e-09, 1.50797e-09, 1.36767e-09,  // 210
	1.24042e-09, 1.12502e-09, 1.02035e-09, 9.25413e-10, 8.39313e-10, 7.61224e-10, 6.904e-10, 6.26166e-10, 5.67908e-10, 5.1507e-10,  // 220
	4.67148e-10, 4.23685e-10, 3.84265e-10, 3.48514e-10, 3.16088e-10, 2.86679e-10, 2.60007e-10, 2.35816e-10, 2.13876e-10, 1.93977e-10,  // 230
	1.7593e-10, 1.59561e-10, 1.44716e-10, 1.31251e-10, 1.1904e-10, 1.07964e-10, 9.79195e-11, 8.88092e-11, 8.05464e-11, 7.30524e-11,  // 240
	6.62557e-11, 6.00913e-11, 5.45004e-11, 4.94297e-11, 4.48308e-11, 4.06598e-11, 3.68768e-11, 3.34458e-11, 3.03341e-11, 2.75118e-11,  // 250
	2.49521e-11, 2.26306e-11, 2.05251e-11, 1.86154e-11, 1.68834e-11, 1.53126e-11, 1.38879e-11
};

float vl_mod_2pi_f (float x)
{
	while (x > (float)(PI2)) x -= (float) (PI2) ;
	while (x < 0.0F) x += (float) (PI2);
	return x ;
}
float vl_fast_atan2_f (float y, float x)
{
	float angle, r ;
	float abs_y    = fabsf (y) + EPSILON_F ;

	if (x >= 0) {
		r = (x - abs_y) / (x + abs_y) ;
		angle = QUTER_PI;
	} else {
		r = (x + abs_y) / (abs_y - x) ;
		angle = THR_QUTER_PI;
	}
	angle += (0.1821F*r*r - 0.9675F) * r ;
	return (y < 0) ? PI2 - angle : angle ;
}
long int vl_floor_f (float x)
{
	long int xi = (long int) x ;
	if (x >= 0 || (float) xi == x) return xi ;
	else return xi - 1 ;
}
float vl_fast_resqrt_f (float x)
{
	float xhalf = 0.5f*x;
	int i = *(int*)&x; // get bits for floating VALUE 
	i = 0x5f375a86- (i>>1); // gives initial guess y0
	x = *(float*)&i; // convert bits BACK to float
	x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
	return x;
}
float vl_fast_sqrt_f (float x)
{
	return (x < 1e-8) ? 0 : x * vl_fast_resqrt_f (x) ;
}
long int vl_floor_d (double x)
{
	long int xi = (long int) x ;
	if (x >= 0 || (double) xi == x) return xi ;
	else return xi - 1 ;
}
double fast_expn (double x)
{
	//double a,b,r ;
	int i ;
	/*assert(0 <= x && x <= EXPN_MAX) ;*/

	if (x > EXPN_MAX) return 0.0 ;

	x *= 10.24;//EXPN_SZ / EXPN_MAX ;
	i = (int)x;
	return expn_tab [i    ] + (x - i) * (expn_tab [i + 1] - expn_tab [i    ]) ;
}
float normalize_histogram(float * p)
{
	float  norm = 0.0 ;
	int i;
	for (i = 0; i < 128; i++)
		norm += p[i] * p[i] ;

	norm = sqrt (norm) + EPSILON_F ;

	if(norm > 0)
		for (i = 0; i < 128; i++)
			p[i] /= norm;

	return norm;
}
/*
* Compute the orientation and descriptor for each detected 
* when the neighboring patch of the keypoint is available
*/
void AlpOctaveBF::computeDescriptor(FeatureList & featurelist, float xper)
{
	int iter, iori;
	int block_row, block_col, cur_block_row, cur_block_col;
	int s_cur;
	gs_type * blockPtr = NULL;
	gs_type * p, *pt;
	float * src;
	int xi, yi, ys, xs, x1, x2, y1, y2, x0, y0;
	int left, right, up, bottom;
	float x, y, r2;
	int sig_x1, sig_y1, sig_x2, sig_y2, sig_x0, sig_y0;

	enum {nbins = 36} ;
	float hist [nbins], maxh ;
	float bin2Pi = (float)(nbins * 1.0 / PI2);
	int nangles;
	float orientation[4];
	float rbuf [128] ;
	float hist_desc[NBP+2][NBP+2][NBO+2];

	float st0, ct0, SBP, SBP_1, sigma2;
	int W_Des, W_Ori;
	float wsigma = (float)(1.0 / (windowSize * windowSize * 2));

	int const binto = 1 ;          /* bin theta-stride */
	int const binyo = NBO * NBP ;  /* bin y-stride */
	int const binxo = NBO ;        /* bin x-stride */

	block_row = cur_block_id / block_row_n; //current block row No.
	block_col = cur_block_id % block_row_n; //current block col No.

	Feature d;
	for(std::vector<FeatureAlpBF>::iterator k = keypoints.begin() ; k < keypoints.end(); ++k)
	{
		if(k->spatialIndex == -1)	// skip duplicates
			continue;
		if(k->mode == MODE_FINISH)	// skip the keypoint with orientations and descriptor finished
			continue;
		//the current block
		if(k->block_id == cur_block_id){
			if((k->mode & MODE_RIGHT) || (k->mode & MODE_BOTTOM))	// skip the keypoint where its right or bottom is not available
				continue;
		}
		//the left block
		else if(block_col > 0 && k->block_id + 1 == cur_block_id ){
			if(k->mode & MODE_BOTTOM)								// skip the keypoint where its bottom is not available
				continue;
		}
		//the upper block
		else if(block_row > 0 && k->block_id + block_row_n == cur_block_id){
			if((k->mode & MODE_BOTTOM) && (k->mode & MODE_RIGHT))	// skip the keypoint where its right and bottom is not available
				continue;
		}
		//the upper-left block
		else if(block_row > 0 && block_col > 0 && k->block_id + 1 + block_row_n == cur_block_id){

		}
		else continue;

		cur_block_row = k->block_id / block_row_n;	//keypoint's block row No.
		cur_block_col = k->block_id % block_row_n;	//keypoint's block col No.
		s_cur = k->iscale-1;						//keypoint's scale index
		blockPtr = block_buffer + s_cur * block_buffer_len * BLOCK_SIZE;			
		//////////////////////////////////////////////////////////////////////////
		SBP      = magnification * k->sigma + EPSILON_D ;
		SBP_1	 = 1.0f / SBP;
		sigma2	 = 1.0f / (0.5f * magnification * magnification * k->sigma * k->sigma);
		W_Des    = (int)(floor(sqrt(2.0) * SBP * (NBP + 1) / 2.0 + 0.5));
		W_Ori	 = (int)(MAX(floor(1.5 * magnification * k->sigma), 1));
		float W_Ori2 = W_Ori * W_Ori + 0.6f;

		k->mode = MODE_FINISH;
		memset(hist, 0, sizeof(hist));
		xi = (int) (k->x + 0.5);
		yi = (int) (k->y + 0.5);
		if(xi == BLOCK_WIDTH) xi = BLOCK_WIDTH - 1;	//risk
		if(yi == BLOCK_WIDTH) yi = BLOCK_WIDTH - 1;
		up = yi - W_Des;
		if(up <= 0 && cur_block_row == 0)
			up = 1;
		bottom = yi + W_Des;
		if(cur_block_row == block_col_n - 1 && bottom >= block_col_remain_height - 1)
			bottom = block_col_remain_height - 2;
		else if(cur_block_row == block_col_n - 2 && bottom >= block_col_remain_height - 1 + BLOCK_WIDTH)
			bottom = block_col_remain_height - 2 + BLOCK_WIDTH;
		left = xi - W_Des;
		if(left <= 0 && cur_block_col == 0)
			left = 1;
		right = xi + W_Des;
		if(cur_block_col == block_row_n - 1 && right >= block_row_remain_width - 1)
			right = block_row_remain_width - 2;
		else if(cur_block_col == block_row_n - 2 && right >= block_row_remain_width - 1 + BLOCK_WIDTH)
			right = block_row_remain_width - 2 + BLOCK_WIDTH;
		src = grad;
		//////////////////////////////////////////////////////////////////////////
		for(ys = up; ys <= bottom; ys++)
		{
			float ddy, ddx;
			y0 = ys;
			y1 = y0 - 1;
			y2 = y0 + 1;
			if(cur_block_row == 0 && y0 == 0)
			{
				y1 = y0;
			}
			if(cur_block_row == block_col_n - 1 && y0 == block_height - 1)
			{
				y2 = block_height - 1;
			}
			ddy = 0.5;
			if(y2 - y1 == 1 || y2 == y1)
				ddy = 1.0;//*/
			y = ys - k->y;
			y = y * y;

			if(y0 < 0){ sig_y0 = k->block_id-block_row_n; y0 += BLOCK_WIDTH;}
			else if(y0 < BLOCK_WIDTH){ sig_y0 = k->block_id;}
			else{ sig_y0 = k->block_id+block_row_n; y0 -= BLOCK_WIDTH;}

			if(y1 < 0){ sig_y1 = k->block_id-block_row_n; y1 += BLOCK_WIDTH;}
			else if(y1 < BLOCK_WIDTH){ sig_y1 = k->block_id;}
			else{ sig_y1 = k->block_id+block_row_n; y1 -= BLOCK_WIDTH;}

			if(y2 < 0){ sig_y2 = k->block_id-block_row_n; y2 += BLOCK_WIDTH;}
			else if(y2 < BLOCK_WIDTH){ sig_y2 = k->block_id;}
			else{ sig_y2 = k->block_id+block_row_n; y2 -= BLOCK_WIDTH;}

			y1 *= BLOCK_WIDTH;
			y2 *= BLOCK_WIDTH;
			y0 *= BLOCK_WIDTH;//*/

			for(xs = left; xs <= right; xs++)
			{
				float wgt, mod, ang, fbin, gx, gy, rbin;
				int bin, bin1, bin2;
				x0 = xs;
				x1 = x0 - 1;
				x2 = x0 + 1;
				if(x0 == 0 && cur_block_col == 0)
				{
					x1 = x0;
				}
				else x1 = x0 - 1;
				if(x0 == block_width - 1 && cur_block_col == block_row_n - 1)
				{
					x2 = block_width - 1;
				}
				else x2 = x0 + 1;
				ddx = 0.5;
				if(x2 - x1 == 1 || x2 == x1) 
					ddx = 1.0;//*/
				x = xs - k->x;
				r2 = x * x + y;
			
				if(x0 < 0){ sig_x0 = -1; x0 += BLOCK_WIDTH;}
				else if(x0 < BLOCK_WIDTH){ sig_x0 = 0;}
				else{ sig_x0 = 1; x0 -= BLOCK_WIDTH;}

				if(x1 < 0){ sig_x1 = -1; x1 += BLOCK_WIDTH;}
				else if(x1 < BLOCK_WIDTH){ sig_x1 = 0;}
				else{ sig_x1 = 1; x1 -= BLOCK_WIDTH;}
		
				if(x2 < 0){ sig_x2 = -1; x2 += BLOCK_WIDTH;}
				else if(x2 < BLOCK_WIDTH){ sig_x2 = 0;}
				else{ sig_x2 = 1; x2 -= BLOCK_WIDTH;}//*/

				p = blockPtr + block_map[sig_y1 + sig_x0] + y1 + x0;
				pt = blockPtr + block_map[sig_y2 + sig_x0] + y2 + x0;
				gy = *pt - *p; gy *= ddy;


				p = blockPtr + block_map[sig_y0 + sig_x1] + y0 + x1;
				pt = blockPtr + block_map[sig_y0 + sig_x2] + y0 + x2;
				gx = *pt - *p; gx *= ddx;


				mod  = sqrt (gx*gx + gy*gy);
				//mod = vl_fast_sqrt_f(gx*gx + gy*gy);
				ang  = vl_mod_2pi_f   (vl_fast_atan2_f (gy, gx) + PI2) ;
				//ang  = vl_fast_atan2_f (gy, gx) ;
				//ang = atan2r_(gy, gx, mod);
				//if(ang < 0) ang += PI2;
				*src++ = (float)mod;
				*src++ = (float)ang;

				if (r2 < W_Ori2)
				{
					wgt  = fast_expn (r2 * sigma2) * mod;
					fbin = bin2Pi * ang - 0.5f;
					if(fbin < 0)
					{
						bin = -1;
						bin1 = nbins - 1;
						bin2 = 0;
					}
					else
					{
						bin = (int)fbin;
						bin1 = bin;
						bin2 = bin + 1;
						if(bin2 >= nbins)
						{
							bin2 = 0;
						}
					}
					rbin = (fbin - bin) * wgt ;
					hist [bin1] += wgt - rbin ;
					hist [bin2] += rbin ;
				}
			}//end x
		}//end y

		for (iter = 0; iter < 6; iter ++) {
			float prev  = hist [nbins - 1] ;
			float first = hist [0] ;
			int i ;
			for (i = 0; i < nbins - 1; i++) {
				float newh = (prev + hist[i] + hist[i+1]) / 3.0f;
				prev = hist[i] ;
				hist[i] = newh ;
			}
			hist[i] = (prev + hist[i] + first) / 3.0f ;
		}

		maxh = 0 ;
		for (iori = 0 ; iori < nbins ; ++iori)
			maxh = MAX (maxh, hist [iori]) ;

		/* find peaks within 80% from max */
		nangles = 0 ;
		for(iori = 0 ; iori < nbins ; ++iori) {
			float h0 = hist [iori] ;
			float hm = hist [(iori - 1 + nbins) % nbins] ;
			float hp = hist [(iori + 1 + nbins) % nbins] ;

			if (h0 > 0.8*maxh && h0 > hm && h0 > hp) {
				float di = - 0.5f * (hp - hm) / (hp + hm - 2 * h0) ;
				float th = PI2 * (iori + di + 0.5f) / nbins ;
				orientation [ nangles++ ] = th ;
				if( nangles == 4 )
					break;
			}
		}//*/
		//////////////////////////////////////////////////////////////////////////
		//output the detector's character
		d.x = (k->x + BLOCK_WIDTH * cur_block_col) * xper;
		d.y = (k->y + BLOCK_WIDTH * cur_block_row) * xper;
		d.scale = k->sigma * xper;
		d.peak = k->peak;
		d.iscale = k->iscale;
		d.octave = k->octave;
		d.curvRatio = k->curvRatio;
		d.curvSigma = k->curvSigma;
		//////////////////////////////////////////////////////////////////////////
		int binx, biny, bint, binx1, biny1, bint1;
		for(iori = 0; iori < nangles; iori++)
		{
			int bin;
			float *dpt ;
			float angle0 = orientation[iori];
			st0 = sin (angle0) * SBP_1;
			ct0 = cos (angle0) * SBP_1;
			d.orientation = angle0;
			/* clear descriptor */
			memset(hist_desc, 0, sizeof(hist_desc));

			src = grad;
			float dx, dy, nx, ny, nx1, ny1, nx2, ny2;
			float rbinx, rbiny, rbint;
			float v_r1, v_r0, v_rc11, v_rc10, v_rc01, v_rc00;  
			float v_rco111, v_rco110, v_rco101, v_rco100;  
			float v_rco011, v_rco010, v_rco001, v_rco000;  
			dy = up - k->y - 1;
			dx = left - k->x - 1;
			nx2 = ct0 * dx + st0 * dy;
			ny2 = -st0 * dx + ct0 * dy;
			for(y0 = up; y0 <= bottom; y0++)
			{
				//float dy = y0 - k->y;
				nx1 = (nx2 += st0);
				ny1 = (ny2 += ct0);
				for(x0 = left; x0 <= right; x0++)
				{	
					nx1 += ct0;
					ny1 -= st0;
					if(nx1 >= 2.5 || nx1 < -2.5 || ny1 >= 2.5 || ny1 < -2.5) { src += 2; continue;}
					//get the gradient value
					float mod = *src++;
					float angle = *src++;

					float theta = angle - angle0;
					if(theta >= PI2) theta -= PI2;
					if(theta < 0) theta += PI2;

					float nt = BPO_P_PI2 * theta;
					
					//get the weight
					//float win = fast_expn((nx*nx + ny*ny) * wsigma) * mod;
					float win = fast_expn((nx1*nx1 + ny1*ny1) * wsigma) * mod;

					//apply fast tri-linear interpolation
					nx = nx1 + 2.5f;
					ny = ny1 + 2.5f;

					binx = (int)nx; biny = (int)ny; bint = (int)nt;
					binx1 = binx + 1;
					biny1 = biny + 1;
					bint1 = bint + 1;
					rbinx = nx - binx ;
					rbiny = ny - biny ;
					rbint = nt - bint ;
	

					v_r1 = win * rbinx, v_r0 = win - v_r1;
					v_rc11 = v_r1 * rbiny, v_rc10 = v_r1 - v_rc11;  
					v_rc01 = v_r0 * rbiny, v_rc00 = v_r0 - v_rc01;  
					v_rco111 = v_rc11 * rbint, v_rco110 = v_rc11 - v_rco111;  
					v_rco101 = v_rc10 * rbint, v_rco100 = v_rc10 - v_rco101;  
					v_rco011 = v_rc01 * rbint, v_rco010 = v_rc01 - v_rco011;  
					v_rco001 = v_rc00 * rbint, v_rco000 = v_rc00 - v_rco001;  

					hist_desc[binx][biny][bint] += v_rco000;  
					hist_desc[binx][biny][bint1] += v_rco001;  
					hist_desc[binx][biny1][bint] += v_rco010;  
					hist_desc[binx][biny1][bint1] += v_rco011;  
					hist_desc[binx1][biny][bint] += v_rco100;  
					hist_desc[binx1][biny][bint1] += v_rco101;  
					hist_desc[binx1][biny1][bint] += v_rco110;  
					hist_desc[binx1][biny1][bint1] += v_rco111;  //*/

				}//end x
			}//end y

			//output the descriptor
			dpt = rbuf;
			for(biny = 1; biny <= NBP; biny++)
			{
				for(binx = 1; binx <= NBP; binx++)
				{
					hist_desc[binx][biny][0] += hist_desc[binx][biny][NBO];
					hist_desc[binx][biny][1] += hist_desc[binx][biny][NBO+1];
					for(bint = 0; bint < NBO; bint++)
					{
						*dpt++ = hist_desc[binx][biny][bint];
					}
				}
			}//*/
			/* Normalize the histogram to L2 unit length. */
			normalize_histogram (rbuf) ;

			/* Truncate at 0.2. */
			for(bin = 0; bin < 128; ++ bin) if (rbuf[bin] > 0.2) rbuf[bin] = 0.2;

			/* Normalize again. */
			normalize_histogram (rbuf) ;

			for (int j = 0 ; j < 128 ; ++j) {
				float x = 512.0F * rbuf [j] ;
				x = (x < 255.0F) ? x : 255.0F ;
				d.descr[j] = (unsigned char) x ;		// return uint8
			}
			featurelist.features.push_back(d);
		}//end orient
	}//end key
}
bool cmp(const FeatureAlp &a, const FeatureAlp & b)
{
	return a.peak < b.peak;
}
/*
* Perform the filtering in frequency domain
* 4 Gaussian blocks are generated and stored to G1, G2, G3, G4
* 4 LoG response blocks are generated and stored to L1, L2, L3, L4
*/
void AlpOctaveBF::SpatialFiltering()
{
	float * pdata		= NULL;
	gs_type * p			= NULL;
	element_type * pLoG	= NULL;
	input_type * pt2	= NULL;
	int i, j, iii, jjj;

	
	if(octave == 0)
		conv2(filters->inmat, o1g1_filter, G1);			// now G1 contains the filtered image
	else
		memcpy(G1, filters->inmat, FBLOCK_WIDTH*FBLOCK_WIDTH*sizeof(float));

	conv2(G1, g2_filter, G2);								// now G2 contains the filtered image
	conv2(G2, g3_filter, G3);								// now G3 contains the filtered image
	conv2(G3, g4_filter, G4);								// now G4 contains the filtered image//*/
	/* Filtering the block using frequency filter */
	for(int s = 0; s < 4 ; ++s)
	{
		//////////////////////////////////////////////////////////////////////////
		//save the data to the block_buffer;
		if(s == 1 || s == 2)
		{
			p = block_buffer + (s-1) * block_buffer_len * BLOCK_SIZE + block_map[cur_block_id];
			if(s == 1) pdata = G2 + padWidth * FBLOCK_WIDTH;
			else if(s == 2) pdata = G3 + padWidth * FBLOCK_WIDTH;

			for(j = 0, jjj = padWidth; j < block_height; j++, jjj++)
			{
				for(i = 0, iii = padWidth; i < block_width; i++, iii++)
					*(p+i) = (gs_type)(*(pdata+iii));

				p += BLOCK_WIDTH;
				pdata += FBLOCK_WIDTH;
			}
		}//*/

		//////////////////////////////////////////////////////////////////////////
		//Copy the last scale to the data and downsampling
		if(s == 2)
		{
			pdata = G3 + padWidth * FBLOCK_WIDTH;
			int W = width;
			if(octave == 0) W = w2;
			pt2 = next_octave_input + (sy >> 1) * W;
			for(j = sy >> 1, jjj = padWidth; jjj < BLOCK_WIDTH + padWidth && j < h2; j++, jjj += 2)
			{
				for(i = sx >> 1, iii = padWidth; iii < BLOCK_WIDTH + padWidth && i < w2; i++, iii += 2)
					*(pt2+i) = (input_type)(*(pdata+iii));

				pdata += FBLOCK_WIDTH + FBLOCK_WIDTH;
				pt2 += W;
			}
		}//*/
		//////////////////////////////////////////////////////////////////////////
		switch(s)
		{
			case 0: pLoG = L1;pdata = G1 + extrema_sy * FBLOCK_WIDTH;break;
			case 1: pLoG = L2;pdata = G2 + extrema_sy * FBLOCK_WIDTH;break;
			case 2: pLoG = L3;pdata = G3 + extrema_sy * FBLOCK_WIDTH;break;
			case 3: pLoG = L4;pdata = G4 + extrema_sy * FBLOCK_WIDTH;break;
		}
		float t;
		float squarSigma = sigmas[s] * sigmas[s];
		for(j = 0, jjj = extrema_sy; j < extrema_h; j++, jjj++)
		{
			for(i = 0, iii = extrema_sx; i < extrema_w; i++, iii++)
			{
				t = 0;
				if(iii - 1 >= 0) t += *(pdata+iii-1) - *(pdata+iii);
				if(iii + 1 < FBLOCK_WIDTH) t += *(pdata+iii+1) - *(pdata+iii);
				if(jjj - 1 >= 0) t += *(pdata+iii-FBLOCK_WIDTH) - *(pdata+iii);
				if(jjj + 1 < FBLOCK_WIDTH) t += *(pdata+iii+FBLOCK_WIDTH) - *(pdata+iii);

				*(pLoG+i) = (element_type)(t * squarSigma);
			}
			pLoG += extrema_w;
			pdata += FBLOCK_WIDTH;
		}//*/
	}
}
/*
* Perform the filtering in frequency domain
* 4 LoG response blocks are generated and stored to L1, L2, L3, L4
* 2 Gaussian blocks are generated and stored to block_buffer
*/
void AlpOctaveBF::FrequencyFiltering()
{
	float * pdata	= NULL;
	gs_type * p		= NULL;
	element_type * pLoG	= NULL;
	input_type * pt2		= NULL;
	int i, j, iii, jjj;
		
	//////////////////////////////////////////////////////////////////////////
	//First layer
	if(octave == 0)
	{
		fftwf_execute(filters->fftplan);	//forward FFT transform
		filters->Convolution(octave, FILTER_LOG, 0);

		pLoG = L1;
		pdata = filters->inmat + extrema_sy * FBLOCK_WIDTH;
		for(j = 0, jjj = extrema_sy; j < extrema_h; j++, jjj++)
		{
			for(i = 0, iii = extrema_sx; i < extrema_w; i++, iii++)
			{
				*(pLoG+i) = *(pdata+iii);
			}
			pLoG += extrema_w;
			pdata += FBLOCK_WIDTH;
		}//*/
	}
	else
	{
		pLoG = L1;
		pdata = filters->inmat + extrema_sy * FBLOCK_WIDTH;
		float t;
		float squarSigma = sigmas[0] * sigmas[0];
		for(j = 0, jjj = extrema_sy; j < extrema_h; j++, jjj++)
		{
			for(i = 0, iii = extrema_sx; i < extrema_w; i++, iii++)
			{
				t = 0;
				if(iii - 1 >= 0) t += *(pdata+iii-1) - *(pdata+iii);
				if(iii + 1 < FBLOCK_WIDTH) t += *(pdata+iii+1) - *(pdata+iii);
				if(jjj - 1 >= 0) t += *(pdata+iii-FBLOCK_WIDTH) - *(pdata+iii);
				if(jjj + 1 < FBLOCK_WIDTH) t += *(pdata+iii+FBLOCK_WIDTH) - *(pdata+iii);

				*(pLoG+i) = (element_type)(t * squarSigma);
			}
			pLoG += extrema_w;
			pdata += FBLOCK_WIDTH;
		}//*/
		fftwf_execute(filters->fftplan);	//forward FFT transform
	}
	////////////////////////////////////////////////////////////////////////// 
	//Second and third layer
	for(int s = 1; s < 3 ; ++s)
	{
		filters->Convolution(octave, FILTER_GAUSSIAN, s-1);
		//////////////////////////////////////////////////////////////////////////
		//Save the data to the block_buffer;
		p = block_buffer + (s-1) * block_buffer_len * BLOCK_SIZE + block_map[cur_block_id];
		pdata = filters->inmat + padWidth * FBLOCK_WIDTH;
		for(j = 0, jjj = padWidth; j < block_height; j++, jjj++)
		{
			for(i = 0, iii = padWidth; i < block_width; i++, iii++)
				*(p+i) = (gs_type)(*(pdata+iii));

			p += BLOCK_WIDTH;
			pdata += FBLOCK_WIDTH;
		}

		//////////////////////////////////////////////////////////////////////////
		//Copy the last scale to the data and downsampling
		if(s == 2)
		{
			pdata = filters->inmat + padWidth * FBLOCK_WIDTH;
			int W = width;
			if(octave == 0) W = w2;
			pt2 = next_octave_input + sy / 2 * W;
			for(j = sy / 2, jjj = padWidth; jjj < BLOCK_WIDTH + padWidth && j < h2; j++, jjj += 2)
			{
				for(i = sx / 2, iii = padWidth; iii < BLOCK_WIDTH + padWidth && i < w2; i++, iii += 2)
					*(pt2+i) = (input_type)(*(pdata+iii));

				pdata += FBLOCK_WIDTH + FBLOCK_WIDTH;
				pt2 += W;
			}
		}//*/
		//////////////////////////////////////////////////////////////////////////
		//Generate LoG
		if(s == 1) pLoG = L2;
		else if(s == 2) pLoG = L3;
		pdata = filters->inmat + extrema_sy * FBLOCK_WIDTH;

		float t;
		float squarSigma = sigmas[s] * sigmas[s];
		for(j = 0, jjj = extrema_sy; j < extrema_h; j++, jjj++)
		{
			for(i = 0, iii = extrema_sx; i < extrema_w; i++, iii++)
			{
				t = 0;
				if(iii - 1 >= 0) t += *(pdata+iii-1) - *(pdata+iii);
				if(iii + 1 < FBLOCK_WIDTH) t += *(pdata+iii+1) - *(pdata+iii);
				if(jjj - 1 >= 0) t += *(pdata+iii-FBLOCK_WIDTH) - *(pdata+iii);
				if(jjj + 1 < FBLOCK_WIDTH) t += *(pdata+iii+FBLOCK_WIDTH) - *(pdata+iii);

				*(pLoG+i) = (element_type)(t * squarSigma);
			}
			pLoG += extrema_w;
			pdata += FBLOCK_WIDTH;
		}//*/
	}
	//////////////////////////////////////////////////////////////////////////
	//Forth layer
	filters->Convolution(octave, FILTER_LOG, octave > 0 ? 0 : 1);
	pLoG = L4;
	pdata = filters->inmat + extrema_sy * FBLOCK_WIDTH;
	for(j = 0, jjj = extrema_sy; j < extrema_h; j++, jjj++)
	{
		for(i = 0, iii = extrema_sx; i < extrema_w; i++, iii++)
		{
			*(pLoG+i) = *(pdata+iii);
		}
		pLoG += extrema_w;
		pdata += FBLOCK_WIDTH;
	}//*/
}
/*
* Get the block content from octave input image
* if octave == 0, the octave input image is from unsigned char * data
* otherwise, the octave input image is from octave_input_image
*/
void AlpOctaveBF::getBlockInput(unsigned char * data)
{
	int i, j, ii, jj, iii, jjj;
	float * pdata	= NULL;
	unsigned char * p0	= NULL;
	input_type * p2		= NULL;
	//////////////////////////////////////////////////////////////////////////
	//get block with padding
	memset(filters->inmat, 0, sizeof(float) * FBLOCK_WIDTH * FBLOCK_WIDTH);
	for(j = sy - padWidth, jjj = 0; j < sy + BLOCK_WIDTH + padWidth; j++, jjj++)
	{
		jj = j;
		//mirror padding of the boundary
#ifdef PADDING_MIRROR
		if(jj < 0) {jj = -jj-1;if(jj >= height) continue;}
		if(jj >= height) {jj = height - jj + height - 1; if(jj < 0) continue;}
#else
#ifdef PADDING_REPEAT
		if(jj < 0) {jj = 0;}
		if(jj >= height) {jj = height - 1;}
#else
#ifdef PADDING_ZERO
		if(jj < 0) {continue;}
		if(jj >= height) {continue;}
#endif
#endif
#endif

		//the first octave
		if(octave == 0)
		{
			p0 = data + jj * width;
			pdata = filters->inmat + jjj * FBLOCK_WIDTH;
			for(i = sx - padWidth, iii = 0; i < sx + BLOCK_WIDTH + padWidth; i++, iii++)
			{
				ii = i;
				//mirror padding of the boundary
#ifdef PADDING_MIRROR
				if(ii < 0) {ii = -ii-1; if(ii >= width) continue;}
				if(ii >= width){ii = width - ii + width - 1; if(ii < 0) continue;}
#else
#ifdef PADDING_REPEAT
				if(ii < 0) {ii = 0;}
				if(ii >= width) {ii = width - 1;}
#else
#ifdef PADDING_ZERO
				if(ii < 0) {continue;}
				if(ii >= width) {continue;}
#endif
#endif
#endif
				*(pdata+iii) = (float)*(p0 + ii);
			}
		}
		else
		{
			p2 = next_octave_input + jj * width;
			pdata = filters->inmat + jjj * FBLOCK_WIDTH;
			for(i = sx - padWidth, iii = 0; i < sx + BLOCK_WIDTH + padWidth; i++, iii++)
			{
				ii = i;
				//mirror padding of the boundary
#ifdef PADDING_MIRROR
				if(ii < 0) {ii = -ii-1; if(ii >= width) continue;}
				if(ii >= width){ii = width - ii + width - 1; if(ii < 0) continue;}
#else
#ifdef PADDING_REPEAT
				if(ii < 0) {ii = 0;}
				if(ii >= width) {ii = width - 1;}
#else
#ifdef PADDING_ZERO
				if(ii < 0) {continue;}
				if(ii >= width) {continue;}
#endif
#endif
#endif

				*(pdata+iii) = *(p2 + ii);
			}
		}
	}
}
/*
 * Process the Octave.
 * the detected keypoints including the descriptor are added to the featurelist
 * Returns true if successful, false if the resampled image is too small.
 */
bool AlpOctaveBF::processOctave(FeatureList & featurelist, unsigned char * data, int width_in, int height_in)
{
	input_type * p2		= NULL;
	input_type * pt2	= NULL;
	int i, j;
	int R_Extrema = 4;
	float xper  = (float)pow (2.0, octave);
	if(octave == 0)		//The first octave
	{
		width = width_in;
		height = height_in;
	}
	w2 = width >> 1;
	h2 = height >> 1;
	cur_block_id = 0;

	Allocate(width, height, BLOCK_WIDTH + R_Extrema + R_Extrema, BLOCK_WIDTH + R_Extrema + R_Extrema);

	/* Scan the block from left to right and from top to bottom*/
	for(sy = 0; sy < height; sy += BLOCK_WIDTH)
	{
		v_mode = 0;										//locate the boundary of the block
		extrema_sy = padWidth - R_Extrema;
		extrema_h = BLOCK_WIDTH + R_Extrema + R_Extrema;	//the height of the extrma patch
		block_height = BLOCK_WIDTH;
		if(sy == 0)										//the condition of up bound
		{
			v_mode |= 1;
			extrema_sy += R_Extrema;
			extrema_h -= R_Extrema;
		}
		if(sy + BLOCK_WIDTH >= height)						//the condition of bottom bound
		{
			v_mode |= 2;
			extrema_h = extrema_h - BLOCK_WIDTH - R_Extrema + height - sy;
			block_height = height - sy;
		}
		for(sx = 0; sx < width; sx += BLOCK_WIDTH)
		{
			h_mode = 0;
			extrema_sx = padWidth - R_Extrema;
			extrema_w = BLOCK_WIDTH + R_Extrema + R_Extrema; //the width of the extrama patch
			block_width = BLOCK_WIDTH;
			if(sx == 0)								//the condition of left bound
			{
				h_mode |= 1;
				extrema_sx += R_Extrema;
				extrema_w -= R_Extrema;
			}
			if(sx + BLOCK_WIDTH >= width)				//the condition of right bound
			{
				h_mode |= 2;
				extrema_w = extrema_w - BLOCK_WIDTH - R_Extrema + width - sx;
				block_width = width - sx;
			}

			if(octave == 0) getBlockInput(data);
			else getBlockInput();

#ifdef SPATIAL_FILTERING
			SpatialFiltering();
#else
			FrequencyFiltering();
#endif
			detect();
			if(octave > 0) detectDuplicates(featurelist); // detect duplicates
			computeDescriptor(featurelist, xper);
			cur_block_id++;
		}//end of block x
	}//end of block y
	if(octave > 0)
	{
		p2 = next_octave_input;
		pt2 = next_octave_input;
		for(j = 0; j < h2; j++)
		{
			for(i = 0; i < w2; i++)
				*(pt2+i) = *(p2+i);
			p2 += width;
			pt2 += w2;
		}
	}
	//printf("Octave %d, w=%d, h=%d: %d keypoints detected, %d\n", octave, width, height, keypoints.size(), featurelist.features.size());
	width = w2;
	height = h2;
	keypoints.clear();
	octave++;
	if (min(width, height) <= minSize)
		return false;
	return true;
}

void AlpOctaveBF::Allocate(int Image_width, int Image_height, int LoG_block_width, int LoG_block_height) 
{
	// allocate buffers for log response and gradient map
	int total_memory = 0;
	int Block_size = LoG_block_width * LoG_block_height;	//the block size for LoG space extrema detection
	int Block_size2 = LoG_block_width * 3;

	int Gradient_size = 120 * 120 * 2;					//size of 
	int size = Block_size2 * 8 + Block_size * 4;	//size of ABCD, minmaxResponse, minmaxScale, and L1L2L3L4
	if(size < Gradient_size) size = Gradient_size;

	//allocate memory for LoG space and gradient map, as their memory could be shared
	if(log_gradient_buffer) delete[] log_gradient_buffer;
	log_gradient_buffer = new float[size];
	total_memory += sizeof(float) * size;

	L1 = log_gradient_buffer;
	L2 = L1 + Block_size;
	L3 = L2 + Block_size;
	L4 = L3 + Block_size;
	A = L4 + Block_size;
	B = A + Block_size2;
	C = B + Block_size2;
	D = C + Block_size2;
	minResponse = D + Block_size2;
	maxResponse = minResponse + Block_size2;
	minScale = maxResponse + Block_size2;
	maxScale = minScale + Block_size2;//*/
	grad = log_gradient_buffer;

#ifdef SPATIAL_FILTERING
	if (tmp != NULL) delete[] tmp;
	if (G1 != NULL) delete[] G1;
	if (G2 != NULL) delete[] G2;
	if (G3 != NULL) delete[] G3;
	if (G4 != NULL) delete[] G4;
	tmp = new float [FBLOCK_WIDTH*FBLOCK_WIDTH];
	G1 = new float [FBLOCK_WIDTH*FBLOCK_WIDTH];
	G2 = new float [FBLOCK_WIDTH*FBLOCK_WIDTH];
	G3 = new float [FBLOCK_WIDTH*FBLOCK_WIDTH];
	G4 = new float [FBLOCK_WIDTH*FBLOCK_WIDTH];
#endif
	
	// prepare buffer to contain the next octave input image
	if(!next_octave_input)
	{
		int next_size = ((Image_width+1)/2) * ((Image_height+1)/2);
		if(next_octave_input) delete[] next_octave_input;
		next_octave_input = new float [next_size];
		total_memory += sizeof(float) * next_size;
	}

	//allocate memory for Gaussian block buffer
	block_row_n = (Image_width / BLOCK_WIDTH + (Image_width % BLOCK_WIDTH == 0 ? 0 : 1));
	block_col_n = (Image_height / BLOCK_WIDTH + (Image_height % BLOCK_WIDTH == 0 ? 0 : 1));
	block_row_remain_width = Image_width + BLOCK_WIDTH - block_row_n * BLOCK_WIDTH;
	block_col_remain_height = Image_height + BLOCK_WIDTH - block_col_n * BLOCK_WIDTH;
	int ex = block_row_n;
	if(block_col_n > 1)
	{
		ex++;
		if(block_row_n > 1) ex++;
	}
	block_buffer_len = ex;
	if(block_buffer) delete []block_buffer;
	block_buffer = new gs_type[nlevels * BLOCK_SIZE * block_buffer_len];
	total_memory += sizeof(gs_type) * nlevels * BLOCK_SIZE * block_buffer_len;
	for(int s = 0; s < block_row_n * block_col_n; s++) block_map[s] = (s % ex) * BLOCK_SIZE;
	
	if(capacity < total_memory)
		capacity = total_memory;
	//printf("Allocate Memory: %d KB\n", total_memory / 1024);
}
void AlpOctaveBF::Clear ()
{
	if (empty())
		return;

	if(next_octave_input) delete[] next_octave_input;
	if(log_gradient_buffer) delete[] log_gradient_buffer;
	if(block_buffer) delete[] block_buffer;

	L1 = L2 = L3 = L4 = A = B = C = D = NULL;
	minResponse = maxResponse = minScale = maxScale = NULL;
	grad = NULL;
	capacity = 0;
#ifdef SPATIAL_FILTERING
	if (tmp != NULL) delete[] tmp;
	if (G1 != NULL) delete[] G1;
	if (G2 != NULL) delete[] G2;
	if (G3 != NULL) delete[] G3;
	if (G4 != NULL) delete[] G4;
#endif
}

bool AlpOctaveBF::empty () const
{
	return (capacity == 0);
}

/*
 * tell if point k is the minimum value in the surrounding window of k;
 * offset to use: k-w-1, k-w, k-w+1, k-1, (NOT use k), k+1, k+w-1, k+w, k+w+1 (not necessarily in this order)
 */
bool AlpOctaveBF::isMin(int k, float * R) const
{
	float val = R[k];

	return (val < -peakThreshold) && (val < R[k-1]) && (val < R[k+1]) &&
			(val < R[k-extrema_w-1]) && (val < R[k-extrema_w]) && (val < R[k-extrema_w+1]) &&
			(val < R[k+extrema_w-1]) && (val < R[k+extrema_w]) && (val < R[k+extrema_w+1]);
}

/*
 * tell if point k is the maximum value in the surrounding window of k;
 * offset to use: k-w-1, k-w, k-w+1, k-1, (NOT use k), k+1, k+w-1, k+w, k+w+1 (not necessarily in this order)
 */
bool AlpOctaveBF::isMax(int k, float * R) const
{
	float val = R[k];
	return (val > peakThreshold) && (val > R[k-1]) && (val > R[k+1]) &&
			(val > R[k-extrema_w-1]) && (val > R[k-extrema_w]) && (val > R[k-extrema_w+1]) &&
			(val > R[k+extrema_w-1]) && (val > R[k+extrema_w]) && (val > R[k+extrema_w+1]);
}
void AlpOctaveBF::shiftUp()	// shift one line up in memory buffers
{
	size_t size = extrema_w * sizeof(float);

	memcpy(A, A + extrema_w, size);
	memcpy(A + extrema_w, A + 2 * extrema_w, size);
	memcpy(B, B + extrema_w, size);
	memcpy(B + extrema_w, B + 2 * extrema_w, size);
	memcpy(C, C + extrema_w, size);
	memcpy(C + extrema_w, C + 2 * extrema_w, size);
	memcpy(D, D + extrema_w, size);
	memcpy(D + extrema_w, D + 2 * extrema_w, size);

	memcpy(minResponse, minResponse + extrema_w, size);
	memcpy(minResponse + extrema_w, minResponse + 2 * extrema_w, size);
	memcpy(maxResponse, maxResponse + extrema_w, size);
	memcpy(maxResponse + extrema_w, maxResponse + 2 * extrema_w, size);
	memcpy(minScale, minScale + extrema_w, size);
	memcpy(minScale + extrema_w, minScale + 2 * extrema_w, size);
	memcpy(maxScale, maxScale + extrema_w, size);
	memcpy(maxScale + extrema_w, maxScale + 2 * extrema_w, size);

}
void AlpOctaveBF::computeResponse(int startLineSrc, int startLineDst, int nLines)
{
	int start_offset = startLineSrc * extrema_w;
	int dest_offset  = startLineDst * extrema_w;
	int j;
	start_offset -= dest_offset;
	for (int k = dest_offset; k < (dest_offset + nLines * extrema_w); ++k)
	{
		j = k + start_offset;
		A[k] = -0.246388f*L1[j] + 0.493379f*L2[j] + -0.271662f*L3[j] + 0.013998f*L4[j];
		B[k] = 2.502135f*L1[j] + -4.563607f*L2[j] + 2.010828f*L3[j] + 0.154854f*L4[j];
		C[k] = -8.200728f*L1[j] + 12.982370f*L2[j] + -4.044904f*L3[j] + -1.056472f*L4[j];
		D[k] = 8.643160f*L1[j] + -10.842436f*L2[j] + 2.120433f*L3[j] + 1.388641f*L4[j];
	}

	// Values at octave boundaries:
	// L = a*octaveRange(1).^3 + b*octaveRange(1).^2 + c*octaveRange(1) + d;
	// R = a*octaveRange(end).^3 + b*octaveRange(end).^2 + c*octaveRange(end) + d;

	const float * L = L1;
	const float * R = L4;

	for (int k = dest_offset; k < (dest_offset + nLines*extrema_w); ++k)		// compute extrema
	{
		j = k + start_offset;
		minResponse[k] = min(L[j], R[j]);		// initialize minResponse
		maxResponse[k] = max(L[j], R[j]);		// initialize maxResponse
		minScale[k] = 0;
		maxScale[k] = 0;

		if (std::abs(A[k]) > 0)
		{
			float ap = 2*3*A[k];
			float bp = 2*B[k];
			float n = bp * bp - 2*ap*C[k];
			if (n >= 0)
			{
				n = sqrt(n);

				float S1 = (-bp + n)/ap;
				float S2 = (-bp - n)/ap;

				// check range
				if ((S1 >= sigmas[0]) && (S1 <= sigmas[3]))
				{
					float R1 = (float) (A[k]*S1*S1*S1 + B[k]*S1*S1 + C[k]*S1 + D[k]);	// compute response value at the S1 x-value

					if (R1 < minResponse[k])
					{
						minResponse[k] = R1;
						minScale[k] = S1;
					}
				}

				if ((S2 >= sigmas[0]) && (S2 <= sigmas[3]))
				{
					float R2 = (float) (A[k]*S2*S2*S2 + B[k]*S2*S2 + C[k]*S2 + D[k]);
					// find maximum
					if (R2 > maxResponse[k])
					{
						maxResponse[k] = R2;
						maxScale[k] = S2;
					}
				}
			}
		}
	} // end loop; minResponse, maxResponse, minScale, maxScale are now set.
}
void AlpOctaveBF::detect()
{
	static const int border = 4;		// ignore borders as key point candidates

	computeResponse(border - 1, 0, 3);		// process 3 lines starting from border_top - 1 up to border top + 1

	// detect extrema in minResponse, maxResponse

	float curvSigma = 0;

	for (int base_i = border; base_i < (extrema_h - border); ++base_i)
	{
		static const int i = 1;		// the central line

		// detect keypoints in the current central line
		for (int j = border; j < (extrema_w - border); ++j)
		{
			int k = i*extrema_w + j;
			if ((minScale[k] >= lowSigma) && (minScale[k] <= highSigma)		// check if sigma is in the [lowSigma,highSigma] range
				&& (isMin(k, minResponse))	    							// look for a minimum
				&& ((curvSigma = abs(6*A[k]*minScale[k] + 2*B[k])) > sigmaThreshold))		// test on second derivative
			{
				FeatureAlpBF point;	    			// save point
				point.ix = j + extrema_sx - padWidth;		//adjust to non-overlap block
				point.iy = base_i + extrema_sy - padWidth;
				point.x = (float)point.ix;
				point.y = (float)point.iy;
				point.octave = octave;
				point.sigma = minScale[k];
				point.iscale = getClosestIndex(point.sigma);
				point.peak = minResponse[k];
				point.orientation = 0; 			// will be set later on
				point.spatialIndex = k;
				point.curvSigma = curvSigma;

				point.block_id = cur_block_id;
				point.mode = 0;
				int w = (int)(point.sigma * 10.6066 + 0.5);
				if(!(h_mode & 1) && point.ix - w < 0) point.mode |= MODE_LEFT;
				if(!(h_mode & 2) && point.ix + w >= block_width) point.mode |= MODE_RIGHT;
				if(!(v_mode & 1) && point.iy - w < 0) point.mode |= MODE_TOP;
				if(!(v_mode & 2) && point.iy + w >= block_height) point.mode |= MODE_BOTTOM;

				if (computeCurvRatioAndCoordinates(point))		// curvature ratio test
				{
					keypoints.push_back(point);
				}
			}
			else if ((maxScale[k] >= lowSigma) && (maxScale[k] <= highSigma) 	// test for existence
				&& (isMax(k, maxResponse))	    								// look for a maximum
				&& ((curvSigma = abs(6*A[k]*maxScale[k] + 2*B[k])) > sigmaThreshold))			// test on second derivative
			{
				FeatureAlpBF point;	    			// save point
				point.ix = j + extrema_sx - padWidth;		//adjust to non-overlap block
				point.iy = base_i + extrema_sy - padWidth;
				point.x = (float)point.ix;
				point.y = (float)point.iy;
				point.octave = octave;
				point.sigma = maxScale[k];
				point.iscale = getClosestIndex(point.sigma);
				point.peak = maxResponse[k];
				point.orientation = 0; 			// will be set later on
				point.spatialIndex = k;
				point.curvSigma = curvSigma;

				point.block_id = cur_block_id;
				point.mode = 0;
				int w = (int)(point.sigma * 10.6066 + 0.5);
				if(!(h_mode & 1) && point.ix - w < 0) point.mode |= MODE_LEFT;
				if(!(h_mode & 2) && point.ix + w >= block_width) point.mode |= MODE_RIGHT;
				if(!(v_mode & 1) && point.iy - w < 0) point.mode |= MODE_TOP;
				if(!(v_mode & 2) && point.iy + w >= block_height) point.mode |= MODE_BOTTOM;

				if (computeCurvRatioAndCoordinates(point))		// curvature ratio test
				{
					keypoints.push_back(point);
				}
			}
		}	// end for

		shiftUp();								// shift up one line for next iteration
		computeResponse(base_i + 2 , 2, 1);		// compute response of last line for next iteration

	}
}

/*
 * This version uses only the central scales 1 and 2 (like vl_feat).
 */
int AlpOctaveBF::getClosestIndex(float sigma)
{
	if (sigma <= inter_sigmas[1])
		return 1;
	else
		return 2;
}


bool AlpOctaveBF::isDuplicate(const Feature & a)
{
	return (a.spatialIndex == -1);
}

/*
 * This method erases the duplicate keypoints from featurelist, using the erase-remove idiom.
 */
void AlpOctaveBF::detectDuplicates(FeatureList & featurelist)
{
	// mark duplicates - using a full search algorithm

	int rescaler = (1 << octave); 	// 2, 4, 8, 16 ...
	float threshold = (radiusMerge + sigmaMerge) * (1 << (octave - 1));

	for(std::vector<Feature>::iterator p1=featurelist.features.begin(); p1<featurelist.features.end(); ++p1)
	{
		if(p1->octave == octave-1) 		// ignore octaves other than the previous one
		{
			for(std::vector<FeatureAlpBF>::iterator p2 = keypoints.begin(); p2<keypoints.end(); ++p2)
			{
				float dist = abs(rescaler*(p2->x+sx) - p1->x) + abs(rescaler*(p2->y+sy) - p1->y) + abs(rescaler*p2->sigma - p1->scale);

				if (dist < threshold)
				{
					// suppress the key point having the smaller peak (if both positive) or the greater peak (if both negative).
					// do not suppress the key point if the two peaks have different sign

					if ((p1->peak > 0) && (p2->peak > 0))
					{
						if (p1->peak < p2->peak)
							p1->spatialIndex  = -1;				// this flag indicates a duplicate key point
						else
							p2->spatialIndex  = -1;				// this flag indicates a duplicate key point
					}

					if ((p1->peak < 0) && (p2->peak < 0))
					{
						if (p1->peak > p2->peak)
							p1->spatialIndex  = -1;				// this flag indicates a duplicate key point
						else
							p2->spatialIndex  = -1;				// this flag indicates a duplicate key point
					}

					break;			// no other point can be so close, so skip to the next iteration
				}
			}
		}
	}

	// now remove all marked items from the "features" vector
	// (NB: marked elements in "keypoints" will be ignored, so there is no need to remove them)

	featurelist.features.erase( std::remove_if(featurelist.features.begin(), featurelist.features.end(), isDuplicate), featurelist.features.end() );
}

bool AlpOctaveBF::computeCurvRatioAndCoordinates(FeatureAlp & d) const
{
	// p11 p12 p13
	// p21 p22 p23
	// p31 p32 p33

	int k = d.spatialIndex;
	float s = d.sigma;
	float ss = s*s;
	float sss = s*ss;
	float p11 = A[k-extrema_w-1]*sss + B[k-extrema_w-1]*ss + C[k-extrema_w-1]*s + D[k-extrema_w-1];
	float p12 = A[k-extrema_w]*sss + B[k-extrema_w]*ss + C[k-extrema_w]*s + D[k-extrema_w];
	float p13 = A[k-extrema_w+1]*sss + B[k-extrema_w+1]*ss + C[k-extrema_w+1]*s + D[k-extrema_w+1];
	float p21 = A[k-1]*sss + B[k-1]*ss + C[k-1]*s + D[k-1];
	float p22 = d.peak;
	float p23 = A[k+1]*sss + B[k+1]*ss + C[k+1]*s + D[k+1];
	float p31 = A[k+extrema_w-1]*sss + B[k+extrema_w-1]*ss + C[k+extrema_w-1]*s + D[k+extrema_w-1];
	float p32 = A[k+extrema_w]*sss + B[k+extrema_w]*ss + C[k+extrema_w]*s + D[k+extrema_w];
	float p33 = A[k+extrema_w+1]*sss + B[k+extrema_w+1]*ss + C[k+extrema_w+1]*s + D[k+extrema_w+1];

	float gxx = p21 - 2*p22 + p23;
	float gyy = p12 - 2*p22 + p32;
	float gxy = 0.25f * (p11 + p33 - p31 - p13);
	float TrH = gxx + gyy;
	float DetH = gxx * gyy - gxy * gxy;
	float ratio = abs((TrH*TrH)/DetH);

	d.curvRatio = ratio;

	if (ratio > curvRatioThreshold)
		return false;						// drop the point (nothing else to do in this case)

	const float * qc = qcoeff[d.iscale];			// get the correct coefficients

	float w1 = qc[0]*p11 + qc[1]*p21 + qc[2]*p31 + qc[3]*p12 + qc[4]*p22 + qc[5]*p32 + qc[6]*p13 + qc[7]*p23 + qc[8]*p33;
	qc += 9;	// next row
	float w2 = qc[0]*p11 + qc[1]*p21 + qc[2]*p31 + qc[3]*p12 + qc[4]*p22 + qc[5]*p32 + qc[6]*p13 + qc[7]*p23 + qc[8]*p33;
	qc += 9;
	float w3 = qc[0]*p11 + qc[1]*p21 + qc[2]*p31 + qc[3]*p12 + qc[4]*p22 + qc[5]*p32 + qc[6]*p13 + qc[7]*p23 + qc[8]*p33;
	qc += 9;
	float w4 = qc[0]*p11 + qc[1]*p21 + qc[2]*p31 + qc[3]*p12 + qc[4]*p22 + qc[5]*p32 + qc[6]*p13 + qc[7]*p23 + qc[8]*p33;
	qc += 9;
	float w5 = qc[0]*p11 + qc[1]*p21 + qc[2]*p31 + qc[3]*p12 + qc[4]*p22 + qc[5]*p32 + qc[6]*p13 + qc[7]*p23 + qc[8]*p33;

	float deltaY =  (w3*w4 - 2*w1*w5) / (4*w1*w2 - w3*w3);
	float deltaX = (-w4 - w3*deltaY)/(2*w1);

	//cout << "x = " << d.x << " y = "<< d.y << " deltaX = " << setw(10) << deltaX << " deltaY = " << setw(10) << deltaY << endl;

	if ((abs(deltaX) > maxDisplacement) || (abs(deltaY) > maxDisplacement))
		return false;			// drop the point

	d.x += deltaX;			// correct coordinates
	d.y += deltaY;			// correct coordinates

	return true;	// save this point
}



